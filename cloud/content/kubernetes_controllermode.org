* Pod
Pod看似复杂的API对象, 实际上就是对容器的进一步抽象和封装而已, 即Pod对象就是容器的升级版本. 它对容器
进行了组合, 添加了更多的属性和字段.

kubernetes操作这些"集装箱"的逻辑, 都由控制器(controller)完成.

kube-controller-manager的组件就是一系列控制器的集合,可以查看一下kubernetes项目的pkg/controller目录
这个目录下面的每一个控制器, 都以独特的方式负责某种编排功能, Deployment正是这些控制器中的一种.

这些控制器之所以统一放在pkg/controller目录下, 就因为它们都遵循kubernetes项目中的一个通用编排模式,
即: 控制循环(control loop).

比如: 现在有一种待编排的对象X, 它有一个对应的控制器, 那么就可以用一段GO语言风格的伪代码, 控制循环
如下:
#+BEGIN_SRC text
for {
  实际状态 := 获取集群中对象X的实际状态(Actual State)
  期望状态 := 获取集群中对象X的期望状态(Desired State)

  if 实际状态 == 期望状态 {
    什么都不做
  } else {
    执行编排动作, 将实际状态调整为期望状态
  }
}
#+END_SRC
在具体实现中, 实际状态往往来自于kubernetes集群本身. 如: kubelet通过心跳汇报的容器状态和节点状态,
或者控制系统中保存的应用监控数据, 或者控制器主动收集它自己感兴趣的信息, 这些都是常见的实际状态的
来源.

期望状态一般来自于用户提交的yaml文件.

* Deployment对象控制器模型的实现
1. Deployment控制器从Etcd中获取到所有携带了"app:nginx"标签的Pod, 然后统计它们的数量
   这就是实际状态
2. Deployment对象的replicas字段的值就是期望状态
3. Deployment控制器将两个状态做比较, 然后根据比较结果, 确定是创建Pod, 还是删除已有的Pod

一个kubernetes对象的主要编排逻辑, 实际上是在第3步的"对比"阶段完成的.
这个操作通常被叫做调谐(Reconcile), 这个调谐的过程则被称作"Reconcile Loop"(调谐循环)或"Sync Loop"
(同步循环).

调谐的最终结果往往就是对被控制对象的某种写操作.
增加Pod、删除Pod或更新Pod的某个字段这也是kubernetes项目"面向API对象编程"的一个直观体现.

像Deployment定义的template字段, 在kubernetes项目中有一个专有的名字, 叫做PodTemplate(Pod模板)
[[file:~/Learn_space/blog_notes/cloud/images/deployment.png][Deployment模板]], 类似Deployment这样的一个控制器, 实际上都是由上半部分的控制器定义(包括期望状态),
加上下半部分的被控制对象的模板组成的.

在所有API对象的metadata里, 都有一个字段叫做ownerReference, 用于保存当前这个Api对象的拥有者的信息.


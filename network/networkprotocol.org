* 协议三要素
语法, 语义, 顺序.

伦纳德.里德 创作了《铅笔的故事》, 该故事通过一个铅笔的诞生过程来讲述复杂的经济学理论.

* MAC地址
MAC(Media Access Control, 介质访问控制): 也叫硬件地址, 长度为48bit(共6字节)
前24位叫做组织唯一标志符(Organizationally Unique Identifier, OUI), 是由IEEE的注册管理机构给不同
厂家分配的代码, 用于区分不同的厂家. 后24位是厂家自己分配的, 称为扩展标识符.
同一个厂家生产的网卡中MAC地址后24位是不同的.

MAC地址本来设计为唯一性的, 但后来设备越来越多, 而且还有虚拟化的设备和网卡, 有很多工具可以修改,
但至少应该保持一个局域网内是唯一的.

* 访问网站的过程
1. 在浏览器中输入网址
2. 浏览器会使用DNS查找该网址对应的IP地址
   DNS查找方法, HTTPDNS一种更加精准的地址簿查找协议
3. 找到IP地址后, 浏览器开始打包它的请求.
   HTTP, HTTPS, DNS所在的层叫做应用层.
4. 通过应用层封装后, 浏览器将应用层的包交给下一层去完成, 通过socket编程来实现.

涉及的协议有:
应用层: DHCP, HTTP, HTTPS, RTMP, P2P, DNS, GTP, RPC
传输层: UDP, TCP,
网络层: ICMP, IP, OSPF, BGP, IPSec, GRE
链路层: ARP, VLAN, STP
物理层: 网络跳线

疑问: 当请求"www.baidu.com"时, 通过本地默认网关发送的数据包中, data部分的数据是怎么样的结构.

只要在网络上跑的包, 都是完整的. 可以有下层没上层, 但绝对不可能有上层没有下层.

* 设备
二层设备: 只将MAC头摘下来, 看看到底是丢弃、转发还是自己留着.
三层设备: 将MAc头摘下来后, 再把IP头摘下来, 看看到底是丢弃、转发还是自己留着.

* 网络命令
ifconfig 在net-tools包中
ip 在iproute2包中
[[https://linoxide.com/linux-command/use-ip-command-linux/][net-tools包与ip包的区别]]

** ip addr
结果输出:
#+BEGIN_SRC text
eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP qlen 1000
    link/ether 00:16:3e:32:29:66 brd ff:ff:ff:ff:ff:ff  # MAC地址
    inet 123.56.68.131/22 brd 123.56.71.255 scope global eth1  # IPv4地址
       valid_lft forever preferred_lft forever
#+END_SRC
<BROADCAST>这一行是net_device flags, 网络设备的状态标识.
UP表示网卡处于启动的状态,
BROADCAST表示网卡有广播地址, 可以发送广播
MULTICAST表示网卡可以发送多播包
LOWER_UP表示L1是启动的, 即网线插着
MTU1500指最大传输单元

qdisc pfifo_fast: qdisc是queueing discipline, 中文叫做排队规则. 内核如果需要通过某个网络接口
发送数据包, 都需要按照为这个接口配置的qdisc把数据包加入队列.
最简单的qdis是pfifo, 不对进入的数据包做任何的处理, 数据包采用先入先出的方式通过队列.
pfifo_fast稍微复杂一些, 其队列包含3个波段(band), 在每个波段里使用先进先出
三个波段的优先级也不相同, band 0的优先级最高, band 2的最低, 如果band 0里有数据包, 系统就不会处理
band1的数据包, band1和band2也一样.

数据包是按照服务类型(Type of Service, TOS)被分配多个波段(band)里面的. TOS是IP头里面的一个字段,
代表了当前的包是最高优先级的, 还是最低优先级的.

** 配置IP地址
sudo ifconfig eth1 CIDR  # 设置IP地址, 使用CIDR模式
sudo ifconfig eth1 up  # 设置IP地址后, 启动网卡

sudo ip addr add CIDR dev eth1
sudo ip link set up eth1

* IPv4分类
** 地址分类
| 类别 | IP地址范围                | 私有IP地址范围              |
|------+---------------------------+-----------------------------|
| A类  | 0.0.0.0~127.255.255.255   | 10.0.0.0~10.255.255.255     |
| B类  | 128.0.0.0~191.255.255.255 | 172.16.0.0~172.31.255.255   |
| C类  | 192.0.0.0~223.255.255.255 | 192.168.0.0~192.168.255.255 |

** CIDR
无类型域间选路.

将子网掩码和IP地址按位计算AND, 就可以得到网络号.

* DHCP - 动态主机配置协议
Dynamic Host Configuration Protocol.
** 工作方式
1. 当一台机器加入一个网络时, 只知道自己的MAC地址, 此时就会在局域网中大吼一声"我来了", 这一步叫做
   DHCP Discover. 即新来的机器使用IP地址0.0.0.0发送一个广播, 目的IP地址为255.255.255.255,
   广播包封装在UDP里, UDP封装在BOOTP里. DHCP是BOOTP的增强版本. 如果抓包看到的可能还是BOOTP协议.

   MAC 头: 新人的MAC, 广播MAC(ff:ff:ff:ff:ff:ff)
   IP头: 新人IP0.0.0.0, 广播IP:255.255.255.255
   UDP头: 源端口68, 目标端口67
   BOOTP头: Boot request
   body data: 我的MAC是xxx, 没有IP

2. 如果在一个网络中配置了DHCP server, Server就会发现这是一个新机器, 需要分配IP. 这个过程叫做
   DHCP Offer. 同时DHCP Server为此客户保留为他提供的IP地址, 从而不会为其他DHCP客户分配此IP.

   DHCP Offer格式:
   MAC 头: DHCP Server的MAC, 广播MAC(ff:ff:ff:ff:ff:ff)
   IP头: DHCP server的IP: 192.168.1.2, 广播IP: 255.255.255.255
   UDP头: 源端口67, 目标端口68
   BOOTP头: Boot reply
   body data: 这是你的Mac, 分配了这个IP给你, 你看如何

   发送的数据中包括子网掩码, 网关和IP地址及其租用信息等.
   DHCP Server使用广播地址作为目的地址, 因为此时请求分配的机器还没有自己的IP.

3. 新机器收到回复, 如果有多个DHCP Server, 会选择其中一个DHCP Offer一般是先到达的那个, 并且会向
   网络发送一个DHCP Request广播数据包, 包中有客户端的MAC地址, 接受的租约中的IP地址, 提供此租约
   的DHCP服务器地址等, 并告诉所有DHCP Server它将接受哪一台服务器提供的IP地址, 告诉其他DHCP服务器
   撤销他们提供的IP地址, 以便给下一个IP租用请求者.
   DHCP Request格式:
   MAC头: 新人MAC地址, 广播MAC(ff:ff:ff:ff:ff:ff)
   IP头: 新人IP0.0.0.0, 广播: 255.255.255.255
   UDP头: 源68, 目标67
   BOOTP头: Boot Request
   body data: 我的MAC是xxx, 我准备使用这个DHCP Server分配给我的IP
   此时由于还没有得到DHCP server的最后确认, 客户端任然使用IP0.0.0.0进行广播.
4. DHCP Server接受DHCP request, 会返回一个DHCP ACK消息包, 表明已经接受客户机的选择, 并将
   这一IP地址的合法租用信息和其他配置信息都放入该广播包, 发给客户机.
   数据格式:
   MAC头: DHCP Server的MAC, 广播MAC:(ff:ff:ff:ff:ff:ff)
   IP头: DHCP Server IP, 广播IP: 255.255.255.255
   UDP头: 源端口:67, 目标端口: 68
   BOOTP头: Boot Reply
   body data: DHCP ACK, 这个新人的IP是我这个DHCP Server租的, 租约在此
   最终租约达成的时候, 还是需要广播一下.

** IP地址的收回和续租
客户机在租期过去50%的时候, 直接向其提供IP地址的DHCP Server发送DHCP request消息包.客户机在接受到
该服务器回应的DHCP ACK消息包, 会根据包中提供的新的租期以及其他已经更新的TCP/IP参数, 此时IP租用
就完成了.

** 预启动执行环境(PXE)
Pre-boot Execution Environment.
PXE协议分为客户端和服务器端, 由于还没有操作系统, 只能将客户端放在BIOS中, 当计算机启动时, BIOS把
PXE客户端调入内存里面, 就可以连接到服务端做一些操作了.

1. PXE客户端需要有个自己的IP地址, PXE客户端起来之后就可以发送一个DHCP请求, 让DHCP Server给它分配
   一个地址. 但PXE客户端如何知道PXE服务器在哪儿呢? 因此可以设置DHCP Server. 配置如下:
   #+BEGIN_SRC text
ddns-update-style interim;
ignore client-updates;
allow booting;
allow bootp;

subnet 192.168.1.0 netmask 255.255.255.0 {
    option routers 192.168.1.1;
    option subnent-mask 255.255.255.0;
    option time-offset -18000;
    default-lease-time 21600;
    max-lease-time 43200;
    range dynamic-bootp 192.168.1.240 192.168.1.250
    filename "pxelinux.0";
    next-server 192.168.1.180;
}
   #+END_SRC
按照DHCP原理, 默认的DHCP Server是需要配置的, 如果想使用PXE, 则需要配置next-server指向PXE服务器
的地址, 另外要配置初始启动文件filename.

这样PXE客户端启动之后, 发送DHCP请求之后除了能得到一个IP地址, 还可以知道PXE服务器在哪里, 也可以
知道如何从PXE服务器上下载某个文件, 去初始化操作系统.

** PXE工作过程
1. 启动PXE客户端, 通过DHCP协议告诉DHCP Server, 获得IP地址, 同时也给它PXE服务器的地址、启动
   文件传输协议
2. PXE客户端接受这个文件后, 开始下载文件, 使用TFTP协议. PXE服务器上一般还会有个TFTP服务器
3. PXE客户端受到这个文件后, 开始执行这个文件, 该文件会指示PXE客户端向TFTP服务器请求计算机的配置
   信息pxelinux.cfg, TFTP服务器会给PXE客户端一个配置文件, 里面会说内核在哪里, initramfs在哪里.
   PXE客户端会请求这些文件.
4. 启动Linux内核
   [[file:img/PXE_RUNFLOW.jpg][PXE运行流程]]

* 两台电脑直接相连
** 网线 - 第一层 物理层
需要使用交叉线, 同种设备相连需要使用交叉线. 1-3, 2-6交叉接法. 然后配置同一个网段内的IP地址即可.

集线器(HUB): 完全工作在物理层, 将自己收到的每个字节都复制到其他端口上. Hub采取的是广播的模式.

** 数据链路层 - 第二层
MAC层要解决的问题, MAC(Medium Access Controle), 即媒体访问控制. 控制在往媒体上发送数据时谁先发
谁后发的问题, 有很多算法:
1. 分多个信道, 这叫信道划分
2. 轮流协议
3. 随机接入协议, 以太网就是使用的这个方式.

** 交换机 - 工作在第二层
交换机会进行学习, 学习的结果就是一张表, 称为转发表.

* STP协议
** 最小生成树
在计算机网络中, 生成树的算法叫做STP, 全称是Spanning Tree Protocol
STP协议比较复杂, 可以理解为一场血雨腥风的武林比武.

** 协议概念
Root Bridge: 根交换机, 是整个网络的老大
Designated Bridges: 指定交换机, 可以看着一颗树的树枝
Bridge Protocol Data Units(BPDU), 网桥协议数据单元.
Priority Vector:优先级向量,值越小优先级越高.[Root Bridge ID, Root Path Cost, Bridge ID, Port ID]

** STP工作原理

* PING与ICMP协议
** ICMP协议
ping是基于ICMP协议工作的, ICMP全称是Internet Control Message Protocol, 互联网控制报文协议.
ICMP报文是封装在IP包里面的.

ICMP报文有很多种类型, 不同类型有不同的代码. 最常用的类型是: 主动请求为8, 主动请求的应答是0

ping就是查询报文是一种主动请求, 并且获得主动应答的ICMP协议. ping发的包是符合ICMP协议格式的,
会在它后面增加自己的格式. 在选项数据中, ping还会存放发送请求的时间值, 来计算往返时间.

对ping的主动请求, 进行网络抓包, 称为ICMP ECHO REQUEST. 主动请求的回复称为ICMP ECHO REPLY.
比起原生的ICMP, 多了两个字段, 一个是标识符, 一个是序号.

不会导致产生ICMP差错报文的有:
1. ICMP差错报文(ICMP查询报文可能会产生ICMP差错报文)
2. 目的地址是广播地址或多播地址的IP数据报
3. 作为链路层广播的数据报
4. 不是IP分片的第一片
5. 源地址不是单个主机的的数据报, 即源地址不能为零地址、环回地址、广播地址或多播地址


** 差错报文
差错报文的例子: 终点不可达为3, 源抑制为4, 超时为11, 重定向为5

终点不可达的原因有: 网络不可达代码为0, 主机不可达代码为1, 协议不可达2, 端口不可达为3, 需要进行
分片但设置了不分片4.

源站抑制: 让源站放慢发送速度
时间超时: 超过网络包的生存时间还是没有到达
路由重定向: 让下次发给另一个路由器.

** traceroute
traceroute使用ICMP的规则, 故意制造一些能够产生错误的场景.

traceroute的第一个作用就是故意设置特殊的TTL, 来追踪去往目的地时沿途经过的路由器.
所有的路由器压根就不会回这个ICMP, 这也是traceroute一个公网IP地址时看不到中间路由的原因.

如何知道UDP有没有到达目的主机呢? traceroute会发送一份UDP数据报给目的主机, 但会选择一个不可能的值
作为UDP端口号(大于30000), 当干数据报到达时, 将是目的主机的UDP模块产生一份端口不可达错误ICMP报文.
如果数据报没有到达, 则可能是超时.

Traceroute还有一个作用就是故意设置不分片, 从而确定路径的MTU. 首先是发送分组并设置"不分片"标志,
发送的第一个分组的长度正好与出口MTU相等, 如果中间遇到窄的关口会被卡住, 发送ICMP网络差错包,
类型为"需要进行分片但设置了不分片", 每次收到ICMP"不能分片"差错时就减少分组的长度, 直到到达目标
主机.

* 路由
** 路由表
每一条规则至少包括以下三项信息:
1. 目的网络
2. 出口设备: 将包从哪个口转发出去
3. 下一条网关: 下一个路由器的地址

通过route和ip route命令可以查看或配置路由信息, 例如:
ip route add 10.176.48.0/20 via 10.173.32.1 dev eth0 表示要去10.176.48.0/20这个网络要从eth0端口
出去, 经过10.173.32.1

** 路由策略
在真实的网络环境中, 除了可以根据目的IP地址配置路由外, 还可以根据多个参数来配置路由, 这叫路由策略
例如:
ip rule add from 192.168.1.0/24 table 10
ip rule add from 192.168.2.0/24 table 20
表示从192.168.1.0/24网段来的使用table 10中的路由表

ip route add default scope global nexthop via 100.100.100.1 weight 1 \
nexthop via 200.200.200.1 weight 2
一条路由规则中, 也可以走多条路径, 下一跳有两个地方, 权重分别是1比2

ip route list talbe main  # 查看table main中的路由信息

echo 200 slowtable >> /etc/iproute2/rt_tables  # 添加一个table 名字叫做 slowtable

向这个表中添加规则:
ip rule add from 192.168.1.101 table slowtable
ip rule ls  # 查看规则

在slowtable路由表中添加规则:
ip route add default via 60.190.27.189 dev eth3 table slowtable
ip route flush cache

** 动态路由算法
使用动态路由路由器, 可以根据路由协议算法生成动态路由表.

*** 距离矢量路由算法
distance vector routing: 基于Bellman-Ford算法

基本思路是: 每个路由都保存一个路由表, 包含多行, 每行对应网络中的一个路由器, 每行包含两部分信息
一个是要到目标路由器从那条线出去, 一个是到目标路由器的距离.
每个路由器都知道自己和邻居之间的距离, 每过几秒每个路由器都将自己所知的到达所有的路由器的距离
告知邻居, 每个路由器也能从邻居那里得到相似的信息.

RIP路由协议就是使用的这种算法. 该算法只能适用于小型网络(小于15跳)

*** 链路状态路由算法
link state routing: 基于dijkstra算法.
基本思路是: 当一个路由器启动时, 首先发现邻居, 向邻居say hello, 邻居回复. 然后计算和邻居的距离.
然后将自己和邻居之间的链路状态广播出去, 发送到整个网络的每个路由器.

该算法只广播更新的或改变的网络拓扑, 而且一但某个路由挂了邻居会广播这个消息, 可以使得坏消息迅速的
收敛.

** 动态路由协议
*** 基于链路状态路由算法 OSPF
OSPF: open shortest path first, 开放式最短路径优先.
广泛应用在数据中心, 由于主要用在数据中心内部, 用于路由决策, 因而称为内部网关协议(Interior gateway
protocol, IGP).
OSPF可以发现多个最短路径, 可以在多个路径中进行负载均衡, 这称为等价路由.

*** 基于距离矢量路由算法 BGP
Border Gateway Protocol.

在网络世界中, 一个个国家成为了自治系统（AS, Autonomous System), 分为:
1. Stub AS: 对外只有一个连接. 这类AS不会传输其他AS的包
2. Multihomed AS: 可能有多个连接到其他的AS, 但拒绝帮其他的AS传输包, 例如: 一些大公司的网络
3. Transit AS: 有多个连接到其他的AS, 并且可以帮助其他AS传输包, 如: 主干网
每个自治系统都有边界路由器, 通过它和外面的世界建立联系.

BGP分为eBGP和iBGP.
自治系统, 边界路由器之间使用eBGP广播路由. 内部网络也需要访问其他的自治系统, 边界路由器利用
iBGP使得内部的路由器能够找到到达外网目的地最好的边界路由器.

BGP使用升级版本的路径矢量路由协议(path-vector protocol).

* 资料
https://blog.csdn.net/yunhua_lee/article/details/8146830
https://zhenbianshu.github.io/2018/12/talk_about_tcp_timewait.html


* 流畅的python读书笔记
* 数据模型
** namedtuple
#+BEGIN_SRC python
from collections import namedtuple

Card = namedtuple('Card', ['rank', 'suit'])
c = Card('A', 'hearts')
#+END_SRC

具名元组有一些自己专有的属性, 如: _fields类属性, _make(iterable)类方法, _asdict()示例方法
Card = namedtuple("Card", ["rank", "ty"])
card = Card._make(("A", "Heart"))  # 建立一个card, rank="A", ty="Heart"

** 数据类型
容器类型: 存放的是包含的任意类型的对象的引用, 如list, tuple等
扁平类型: 存放的是值, 是一段连续的内存空间, 只能存储字符、字节和数值等基础类型.

[[file:img/data_hireachy.png][数据继承]]

** 切片操作
可以对切片进行命名, 利于代码的维护.
#+BEGIN_SRC python
DESCRIPTION = slice(6, 40)
data[DESCRIPTION]  # 进行切片操作
#+END_SRC

将切片放在赋值语句的左边, 或作为del操作的对象, 就可以对切片进行嫁接、切除或就地修改操作.
l = list(range(10))
l[2:5] = [20, 30]
del l[5:7]
l[3::2] = [11, 22]

** 排序
list.sort会就地排序列表, 返回None值. 是稳定的排序算法
sorted与list.sort都支持key参数, 接受一个只有一个参数的函数, 该函数会被用在序列里的每个元素上.

bisect模块包含两个主要函数, bisect和insort. 都利用二分查找算法在有序序列中查找或插入元素.
bisect_left, bisect_right, bisect都有lo和hi两个可选参数用来控制查找的范围.
[[https://code.activestate.com/recipes/577197-sortedcollection/][大神封装的bisect的用法]]

bisect.insort(list, value)  # 将value插入到list中, 也有lo和hi两个参数.

** 数组
创建数组需要一个类型码, 用来表示在底层的C语言应该存放怎样的数据类型.
#+BEGIN_SRC python
from array import array
from random import random

floats = array('d', (random() for i in range(10**7)) )
print(floats[-1])
fp = open("floats.bin", "wb")
floats.tofile(fp)
fp.close()
floats2 = array('d')
fp = open("floats.bin", "rb")
floats2.fromfile(fp, 10**7)
fp.close()
floats2[-1]

da = array.array(a.typecode, sorted(a))
#+END_SRC

** 内存视图
[[https://eli.thegreenplace.net/2011/11/28/less-copies-in-python-with-the-buffer-protocol-and-memoryviews][memoryview]]
memoryview是一个内置类, 在不复制内容的情况下操作同一个数组的不同切片. memoryview的概念收到了Numpy
的启发, 内存视图其实是范化和去数学化的Numpy数组, 在不需要复制内容的前提下, 在数据结构之间共享内存
数据结构可以是任何形式, 如PIL图片, SQLite数据库等.

memoryview.cast会把同一块内存里的内容打包成一个全新的memoryview对象.
#+BEGIN_SRC python
import array

numbers = array.array('h', [-2, -1, 0, 1, 2])
memv = memoryview(numbers)

# 转成Byte
memv_oct = memv.cast('B')
print(memv_oct.tolist())

# 修改某些字节的数据h
memv_oct[5] = 4
memv_oct[2] = 254
print(numbers)
#+END_SRC

** 双向队列
collections.deque类是线程安全的.

from collections import deque
dq = deque(range(10), maxlen=10)
dq.rotate(3)  # 可以理解为从队列尾部取一个元素并插入到队列头部, 重复3次
dq.rotate(-3)  # 从队列头部取一个元素插入到队列尾部, 重复3次
当队列满了的时候, 会删除掉比较旧的数据

queue模块: 提供了线程安全的同步类Queue, LifoQueue, PriorityQueue
multiprocessing: 实现自己的Queue, 是用于进程间通信的.
multiprocessing.JoinableQueue类型, 可以让任务管理器更方便.
asyncio(python3.4+): 有Queue, LifoQueue, PriorityQueue与JoinableQueue, 为异步编程提供了方便.

** 泛映射类型
[[file:img/map_hireachy.png][泛映射类型的UML图]]

Mapping类与MutableMapping这个两个抽象基类其作用是为dict与其他类似的类型定义形式接口.
非抽象映射类型一般会直接继承这些抽象类, 会直接对dict或collections.UserDict进行扩展.

* 魔术方法 - dunder method
** 注意
特殊方法的存在是为了被Python解释器调用的, 自己并不需要调用它们. 如果是python内置的类型, 则CPython
执行时会超近路, __len__实际上会直接返回PyVarObject里的ob_size属性.

通过内置的函数来使用特殊方法是最好的选择. 内置函数不仅会调用特殊方法, 通常还提供额外的好处, 并且其
速度也更快.

通过实现特殊方法, 自定义数据类型可以表现的与内置类型一样.

[[https://docs.python.org/3/reference/datamodel.html][pydoc datamodel]]

** 属性
#+BEGIN_SRC python
class A(object):
    pass

a = A()
#+END_SRC

len(a)  # 会访问__len__方法
a["name"], a[1]  # 访问__getitem__方法
a.name  # 访问__getattr__方法
a[1:3]  # 切片操作时也会调用__getitem__方法, 传入的对象是slice(1, 3, None)对象

** 迭代操作
迭代操作通常是隐式的, 如果一个集合类型没有实现__contains__方法, 则in运算符就会按顺序
做一次迭代搜索.

if xx in Obj:  # 会调用__contains__方法, 如果没有__contains__方法, 就会调用迭代方法.
for xx in Obj:  # 会调用迭代方法

以上两个in的用法是不一样的.

** 常用魔术方法对应关系
| __repr__ | 输出信息, repr调用该方法                                                           |
| __abs___ | 求绝对值                                                                           |
| __bool__ | 逻辑值, 判真假时调用bool(), 此时会调用__bool__, 如果没有__bool__会尝试调用__len__, |
|          | 若__len__返回0, 则为假.                                                                |
| __add__  | 加法, 返回的值是新建的对象                                                         |
| __mul__  | 乘法, 返回的值是新建的对象, 中缀运算符的基本原则是不改变操作对象,而是产出新值      |
| __str__  | 输出信息, 当对象没有实现该方法时, 会自动调用__repr__                               |

** 序列的增量操作
+= 背后的特殊方法是__iadd__, a +=b 如果实现了该方法就会调用, 否则会变成a = a + b, 从而会调用
__add__方法, *=类似, __imul__.

* 小技巧
** 从列表中随机选择数据
#+BEGIN_SRC python
data = [1, 2, 3, 4]
from random import choice
choice(data)
#+END_SRC

** 元组
#+BEGIN_SRC python
a = (1, 2, [3, 4])
try:
    # a[2] += [50, 60]  # 抛出异常
    a[2].extend([50, 60])  # 不会抛出异常
except Exception as e:
    print(e)

print(a)  # 输出(1, 2, [3, 4, 50, 60])
#+END_SRC
最佳实践: 不要将可变对象放在元组里面, 增量赋值不是一个原子操作, 虽然抛出了异常, 但还是会修改值.
对不理解的现象, 可以查看python的字节码.
dis.dis('s[a] += b')

* python2与python3差异
** 列表推导不再会有变量泄漏
#+BEGIN_SRC python
x = 'Outer Data'
data = [x for x in 'ABC']
print(x)  # python3中x的值为Outer Data, python2: C
#+END_SRC

** 元组拆包
#+BEGIN_SRC python
x = '12345'
a, b, *rest = x
a, *rest, b = x
# python3可以执行, python2语法错误 
#+END_SRC


* 创建项目
django-admin.py startproject <pro_name>  # 创建项目, 以pro_name为项目的根目录
django-admin.py startproject <pro_name> .  # 注意最后的".", 会以当前目录为项目的根目录

* 创建数据库
python manage.py makemigrations <model_name>
python manage.py migrate

注意: 全新的项目可以只执行命令: python manage.py migrate

添加新的数据模型:
python manage.py makemigrations <model_name>
python manage.py migrate

* 运行服务
python manage.py runserver <ip:port>

* 创建应用程序
python manage.py startapp <app_name>

* 激活django的应用程序
需要在项目的settings.py中的INSTALLED_APPS中添加该应用名称.
每次对模型中的数据结构进行修改后, 都需要执行命令.
python manage.py makemigrations <model_name>
python manage.py migrate

* Django建立超级用户
python manage.py createsuperuser

* 数据导出
python manage.py dumpdata >> backup.json  # 数据导出
python manage.py loaddata backup.json  # 数据导入

* 模型生成出错解决方法
1. 新建一个新的空数据库
2. 将settings中的数据连接改为指向新的空数据库
3. 进入相应的模型目录中, 删除migrations目录
4. 重新执行命令
   python manage.py makemigrations <model_name>
   python manage.py migrate
5. 将新数据库中的django_migrations表的数据导出
6. 然后将该数据导入到就数据库中即可重新修改模型

* django图片CDN处理
1. 使用七牛云, 进行相关的配置
2. django在处理图片上传时的逻辑如下
   #+BEGIN_SRC python
class ProjectImage(models.Model):
    description = models.CharField(max_length=64, verbose_name="描述")
    image = models.ImageField(upload_to=settings.IMAGE_PATH + '%Y/%m/%d', verbose_name="图片")
    cdnurl = models.CharField(max_length=256, verbose_name="CDN图片链接")

    class Meta:
        verbose_name = "项目图片"
        verbose_name_plural = "项目图片"
        ordering = ('-pk',)

    def __str__(self):
        return self.description

class ProjectImageForm(forms.ModelForm):
    class Meta:
        model = ProjectImage
        exclude = ['url', 'cdnurl']  # 界面上不显示的字段


class ProjectImageAdmin(admin.ModelAdmin):
    icon = '<i class="material-icons">extension</i>'

    list_display = ('description', 'img', 'cdnurl')
    form = ProjectImageForm

    def save_model(self, request, obj, form, change):
        super(ProjectImageAdmin, self).save_model(request, obj, form, change)
        # 填写表中cdnurl字段的值, 此处并没有上传图片到CDN服务器上
        obj.cdnurl = str(obj.image).replace(settings.IMAGE_PATH, settings.CDN_IMG_URL)
        obj.save()  # 保存图片到物理机上

    def img(self, obj):
        return format_html(
            '<img src="' + obj.cdnurl + '" width="100px">',
        )
    img.short_description = '图片'
    img.allow_tags = True

   #+END_SRC
3. 七牛云的一种工作原理
   当使用CDN链接来访问该图片时, 如果是第一次访问该图片, 由于七牛云上没有该内容, 因此会去服务器上
   拉取数据, 然后就会存储在七牛云的CDN上, 下次访问就从CDN上访问了.
   
   django将图片上传到django项目的指定目录下, 为了能让外部访问, 此时可以配置nginx的静态文件
   访问, 配置如下:
   #+BEGIN_SRC conf
server {
    listen 80;
    server_name <domain>;
    root <img_path>;  # 例如: /opt/hello/wapp_img;

    # 当输入<domain>/2018/xxx.png时, 就会访问到/opt/hello/wapp_img/xxx.png
    location /2018 {
        root <img_path>;  # 例如: /opt/hello/wapp_img;
    }
}
   #+END_SRC

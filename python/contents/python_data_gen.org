* 环境搭建
** matplotlib的安装
apt-get install python3-matplotlib
pip install python-matplotlib

** matplotlib画廊
[[https://matplotlib.org/][web示例]]

** 绘制折线图
#+BEGIN_SRC python
# encoding: utf8

import matplotlib.pyplot as plt

input_values = [1, 2, 3, 4, 5]
squares = [1, 4, 9, 16, 25]

# 设置绘制的线条的粗细
# plt.plot(squares, linewidth=5)
# 当向plot传递一系列数字时, 它假设第一个数据点对应的x坐标值为0, 因此可以传入input_value
# 来修正这个问题
plt.plot(input_values, squares, linewidth=5)

# 设置图标标题, 并给坐标轴加上标签
plt.title("Square Numbers", fontsize=24)
plt.xlabel("Value", fontsize=14)
plt.ylabel("Square of Value", fontsize=24)

# 设置刻度标记的大小
plt.tick_params(axis="both", labelsize=14)

plt.show()
#+END_SRC

** 绘制一系列点
#+BEGIN_SRC python
# encoding: utf8

import matplotlib.pyplot as plt

# 参数s设置绘制图形时使用的点的尺寸大小
plt.scatter(2, 4， s=200)  # 绘制一个点

# 绘制一系列点
# xValue = [1, 2, 3, 4, 5]
# yValue = [1, 4, 9, 16, 25]
# plt.scatter(xValue, yValue, s=100)

plt.show()
#+END_SRC

#+BEGIN_SRC python
# encoding: utf8

import matplotlib.pyplot as plt

xValues = list(range(1, 1001))
yValues = [x**2 for x in xValues]

# edgecolor='none'用于删除数据点的轮廓
# plt.scatter(xValues, yValues, edgecolor='none', s=40)

# c参数用于指定颜色, c的值可以是颜色字符串, 也可以是RGB颜色模式自定义颜色,这个值包含3个0~1之间
# 的小数值, 分别表示红绿蓝分量, 越接近0指定的颜色越深, 值越接近1, 指定的颜色越浅.
# plt.scatter(xValues, y2Values, c="red",edgecolor="none", s=40)
# plt.scatter(xValues, yValues, s=40)
# 颜色映射: 从起始颜色渐变到结束颜色, 通过将c设置成了一个y值列表, 并使用参数cmap指定使用哪个颜色
plt.scatter(xValues, y2Values, c=y2Values, cmap=plt.cm.Blues, edgecolor="none", s=40)

# 设置每个坐标轴的取值范围, 前两个数字是x轴的取值范围, 后两个数是y轴的取值范围.
plt.axis([0, 1100, 0, 1100000])
plt.show()

# bbox_inches指定将图表多余的空白区域裁剪掉, 第一个参数是保存的文件名
plt.savefig("xx.png", bbox_inches='tight')

#+END_SRC

** 随机漫步
#+BEGIN_SRC python
# encoding: utf8

from random import choice

import matplotlib.pyplot as plt

class RandomWalk(object):
    def __init__(self, num_points=5000):
        self.num_points = num_points

        self.x_values=[0]
        self.y_values=[0]
    
    def fill_walk(self):
        while len(self.x_values) < self.num_points:
            x_direction = choice([1, -1])
            x_distance = choice([0, 1, 2, 3, 4])
            x_step = x_direction * x_distance

            y_direction = choice([-1, 1])
            y_distance = choice([0, 1, 2, 3, 4])
            y_step = y_direction * y_distance

            if x_step == 0 and y_step == 0:
                continue

            next_x = self.x_values[-1] + x_step
            next_y = self.y_values[-1] + y_step

            self.x_values.append(next_x)
            self.y_values.append(next_y)

rw = RandomWalk()
rw.fill_walk()
plt.scatter(rw.x_values, rw.y_values, s=15)

# 突出显示第一个点和最后一个点
plt.scatter(0, 0, c='green', edgecolor="none", s=100)
plt.scatter(rw.x_values[-1], rw.y_values[-1], c='red', edgecolor='none', s=100)

# 隐藏坐标轴
plt.axes().get_xaxis().set_visible(False)
plt.axes().get_yaxis().set_visible(False)

# 设置绘图窗口的尺寸, Python假定屏幕分辨率为80像素/英寸, 如果知道系统的分辨率,
# 可以使用形参dpi参数, 如:
# plt.figure(dpi=128, figsize=(10, 6))
plt.figure(figsize=(10, 6))

plt.show()
#+END_SRC

* Pygal
** 模拟掷骰子
1. 安装pygal
   pip install pygal
#+BEGIN_SRC python
# encoding: utf8

from random import randint

import pygal

class Die(object):
    def __init__(self, num_sides=6):
        self.num_sides = num_sides

    def roll(self):
        return randint(1, self.num_sides)

die1 = Die()
die2 = Die()
results = []
for roll_num in range(1000):
    result = die1.roll() + die2.roll()
    results.append(result)

frequencies = []
max_result = die1.num_sides + die2.num_sides
for value in range(2, max_result+1):
    frequency = results.count(value)
    frequencies.append(frequency)

hist = pygal.Bar()
hist.title = "Results of rolling one D6 1000 times"
hist.x_label = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]
hist_x_title = "Result"
hist.y_title = "Frequency of Result"

hist.add("D6", frequencies)
hist.render_to_file("div_visual.svg")
#+END_SRC

* 图表显示数据
#+BEGIN_SRC python
# encoding: utf8
import csv
from matplotlib import pyplot as plt
from datetime import datetime

filename = "sitka_weather_07-2014.csv"
filename = "sitka_weather_2014.csv"

with open(filename) as f:
    reader = csv.reader(f)
    header_row = next(reader)
    
    dates, highs, lows = [], [], []
    for row in reader:
        highs.append(int(row[1]))
        lows.append(int(row[3]))

        current_date = datetime.strptime(row[0], "%Y-%m-%d")
        dates.append(current_date)

# fig = plt.figure(dpi=128, figsize=(10, 6))
fig = plt.figure(figsize=(10, 6))
plt.plot(dates, highs, c='red', alpha=0.5)
plt.plot(dates, lows, c="blue", alpha=0.5)
# 给图表区域着色
plt.fill_between(dates, highs, lows, facecolor="blue", alpha=0.1)

plt.title("Daily high and low temperatures - 2014", fontsize=24)
plt.xlabel("", fontsize=16)
fig.autofmt_xdate()  # 绘制斜写的日期标签
plt.ylabel("Temperature(F)", fontsize=16)
plt.tick_params(axis="both", which="major", labelsize=16)
plt.show()
#+END_SRC
* 世界地图显示人口数据

#+BEGIN_SRC python
# encoding: utf8
import json

import pygal.maps.world
from pygal_maps_world.i18n import COUNTRIES
from pygal.style import RotateStyle
from pygal.style import LightColorizedStyle

def getCountryCode(countryName):
    for code, name in COUNTRIES.iteritems():
        if name == countryName:
            return code
    return None

filename = "population_data.json"
with open(filename) as f:
    pop_data = json.load(f)

cc_populations = {}

for pop_dict in pop_data:
    if pop_dict["Year"] == "2010":
        country_name = pop_dict['Country Name']
        code = getCountryCode(country_name)
        population = int(float(pop_dict['Value']))
        if code:
            cc_populations[code] = population
        else:
            print('ERROR - ' + country_name)

cc_pops_1, cc_pops_2, cc_pops_3 = {}, {}, {}
for cc, pop in cc_populations.iteritems():
    if pop < 10000000:
        cc_pops_1[cc] = pop
    elif pop < 1000000000:
        cc_pops_2[cc] = pop
    else:
        cc_pops_3[cc] = pop

# 给地图设置地图样式
wm_style = RotateStyle('#336699')
wm_style = LightColorizedStyle  # 使用LightColorizedStyle不能直接控制使用的颜色
# 此时可以使用如下的方式, 将LightColorizedStyle作为基本样式
wm_style = RotateStyle("#336699", base_style=LightColorizedStyle)
wm = pygal.maps.world.World(style=wm_style)
wm.title = "World Population in 2010"

#wm.add("North America", {'ca': 3412600, 'us': 309349000, 'mx': 113423000})
#wm.add('Central America', ['bz', 'cr', 'gt', 'hn', 'ni', 'pa', 'sv'])
#wm.add('2010', cc_populations)

wm.add('0-10m', cc_pops_1)
wm.add("10m-1bn", cc_pops_2)
wm.add(">1bn", cc_pops_3)

wm.render_to_file("americas.svg")

#+END_SRC
* GitHub的API使用
#+BEGIN_SRC python
# encoding: utf8

import requests
import pygal
from pygal.style import LightColorizedStyle as LCS, LightenStyle as LS

url = "https://api.github.com/search/repositories?q=language:python&sort=stars"
r = requests.get(url)

response_dict = r.json()
repo_dicts = response_dict["items"]
names, stars = [], []

for repo_dict in repo_dicts:
    names.append(repo_dict['name'])
    stars.append(repo_dict["startgazers_count"])

my_style = LS('#336699', base_style=LCS)

# 创建Pygal的配置文件
my_config = pygal.Config()
my_config.x_label_rotation = 45
my_config.show_legend = False  # 隐藏图例
my_config.title_font_size = 24
my_config.label_font_size = 14
my_config.major_label_font_size = 18
my_config.truncate_label = 15  # 将较长的项目名缩短为15个字符.
my_config.show_y_guides = False  # 隐藏图表中的水平线
my_config.width = 1000  # 设置自定义宽度

# 添加自定义工具提示
plot_dicts = [
    {"value": 16101, 'label': "Description of httpie", "xlink": "点击链接"},
    {"value": 15101, 'label': "Description of django"},
]

chart_tip = pygal.Bar(my_config, style=my_style)
chart_tip.add("", plot_dicts)
chart_tip.render_to_file("python_repos.svg")

chart = pygal.Bar(my_config, style=my_style)
chart.title = "Most-Starred Python Project"
chart.x_labels = names
chart.add("", stars)
chart.render_to_file("python_repos.svg")
#+END_SRC

* 涉及到的数据下载地址
在百度云盘中, 目录是: Python->Python编程-从入门到实践程序源码

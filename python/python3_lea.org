* 函数
命名关键字参数:
def func1(name, age, *param, city, job):
    # city, job就是命名关键字参数

# 没有可变参数时, 必须加上"*"作为特殊的分隔符
def func2(name, age, *, city, job):
    # 注意func1和func2的调用区别

func1("casper", 28, "male", "chess", "CQ", "Programmer")
func2("casper", 28, "CQ", "Programmer")

* 生成器
** 示例
可以使用return从生成器中返回数据, 但只能通过try...catch来获取return的结果值. python2中生成器是无法
使用return来返回值的.
#+BEGIN_SRC python
def fib(num):
    n, a, b = 0, 1, 1
    while n < num:
        yield b
        a, b = b, a+b
        n += 1

    return 'Done'

while 1:
    try:
        x = next(g)
        print("g:{}".format(x))
    except StopIteration as e:
        print("Generator ended return value:{}".format(e.value))
        break

#+END_SRC

** 迭代器与生成器
可迭代对象: 可直接作用于for循环的对象
迭代器: 表示的是一个数据流, 可以被next函数调用并不断返回下一个数据,
直到没有数据时抛出StopIteration. 迭代器的计算是惰性的, 只有在需要返回下一个数据时才会计算.

* 类
** SDK中的链式调用方法
[[file:codesnippet/sdk/RestAPISDK.py][示例代码]]

#+BEGIN_SRC python
# 链式写法
class Chain(object):
    def __init__(self, path=""):
        self.path = path

    def __getattr__(self, path):
        return Chain("%s/%s" %(self.path, path))

    def __str__(self):
        return self.path

    # 如果有参数传入时
    def __call__(self, param):
        return "{}/{}".format(self.path, param)

    __repr__ = __str__

url = Chain().status.user  # url="status/user"
#+END_SRC

* 元类
** 使用type创建类
#+BEGIN_SRC python
def fn(self, name="world"):
    print("Hello, {}".format(name))

Hello = type('Hello', (object,), dict(hello=fn, age=28))  # 创建Hello类
#+END_SRC

type()函数依次传入3个参数:
class的名称, 继承的父类集合(必须是tuple, 不能是list), class拥有的方法以及属性
通过type()函数创建的类与直接写的class是完全一致的, 因为python解释器在遇到class定义时, 先扫描一下
class定义的语法, 然后调用type()函数创建出class.

** metaclass
先定义metaclass, 然后创建类, 然后创建类的实例.

#+BEGIN_SRC python  给自定义类中的方法添加日志
import tornado.web
import functools

def log_api_call(func):
    @functools.wraps(func)
    def wrapper(self, *args, **kw):
        # 打印日志信息
        ret = func(self, *args, **kw)
        return ret
    return wrapper    

class APIRecord(type):
    def __new__(cls, clsName, clsParents, clsAttrs):
        for attr in clsAttrs:
            if not attr.startswith("__") and callable(clsAttrs[attr]):
                clsAttrs[attr] = log_api_call(clsAttrs[attr])
        return super(APIRecord, cls).__new__(cls, clsName, clsParents, clsAttrs)

# py3写法
class BaseHandler(tornado.web.RequestHandler, metaclass=APIRecord):
    # __metaclass__ = APIRecord  # py2写法
    pass

class Index(BaseHandler):
    def get(self):
        self.write("Hello Index")
#+END_SRC

元类的一个典型应用就是ORM: [[https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319106919344c4ef8b1e04c48778bb45796e0335839000][ORM示例]]

* 测试
** 文档测试
#+BEGIN_SRC python
class Hello(object):
    '''
    >>> h = Hello()
    >>> h.hello()
    'hello'
    '''
    def hello(self):
        return 'hello'

def main():
    import doctest
    doctest.testmod()
#+END_SRC
* IO编程
** 简介
操作IO的能力都是由操作系统提供的, 每一种编程语言都会把操作系统提供的低级接口封装起来方便使用.

** file-like object
f = open("xxx.txt", "r"), f就是一个file-like object对象
该类型不要求从特定类继承, 只要写read()方法就行. 类似的还有内存的字节流、网络流、自定义流等.
StringIO就是在内存中创建的file-like object, 常用于临时缓冲.

** StringIO
#+BEGIN_SRC python
try:
    from StringIO import StringIO  # py2
except ImportError:
    from io import StringIO  # py3

s = StringIO()
f = open("/tmp/test.txt", "r")
s.write(f.read())  # 向stringio中写入数据
print(s.getvalue())  # 从stringio中获得数据
#+END_SRC

* 进程
** 分布式进程
#+BEGIN_SRC python python3 服务端
import random, time, queue
from multiprocessing.managers import BaseManager

# 发送任务的队列
task_queue = queue.Queue()
# 接收结果的队列
result_queue = queue.Queue()

# 继承BaseManager
class QueueManager(BaseManager):
    pass

# 将两个Queue都注册到网络上, callable关联了queue对象
QueueManager.register('get_task_queue', callable=lambda: task_queue)
QueueManager.register('get_result_queue', callable=lambda: result_queue)

# 绑定端口, 设置验证码
manager = QueueManager(address=('', 5000), authkey=b'abc')
# 启动Queue
manager.start()

# 获得通过网络访问的Queue对象
task = manager.get_task_queue()
result = manager.get_result_queue()

# 放任务
for i in range(10):
    n = random.randint(0, 100)
    print("Put task {}".format(n))
    task.put(n)

# 从result队列中读取结果
print("Try get results...")
for i in range(10):
    # r = result.get(timeout=10)
    r = result.get()
    print("Result:{}".format(r))

manager.shutdown()
print("master exit")
#+END_SRC
#+BEGIN_SRC python python3 客户端
import time, sys, queue
from multiprocessing.managers import BaseManager

class QueueManager(BaseManager):
    pass

QueueManager.register("get_task_queue")
QueueManager.register("get_result_queue")

server_addr = "127.0.0.1"
m = QueueManager(address=(server_addr, 5000), authkey=b"abc")
m.connect()

task = m.get_task_queue()
result = m.get_result_queue()

for i in range(10):
    try:
        n = task.get(timeout=1)
        print("Run task {} * {}".format(n, n))
        r = "{} * {} = {}".format(n, n, n*n)
        time.sleep(1)
        result.put(r)
    except Exception as e:
        print("task queue is empty.")
#+END_SRC

python2的版本只需要修改queue的导入方式即可

* 时间类型之间的转换
#+BEGIN_SRC python python3
dt = datetime.datetime.now()
dt = datetime.datetime(2018, 11, 13, 10, 10, 10)  # 使用指定的时间创建日期
ts = dt.timestamp()  # 转换为时间戳
datetime.datetime.fromtimestamp(ts)  # 将时间戳转换为datetime, 根据当前的时区进行转换
datetime.datetime.utcfromtimestamp(ts)  # 转换为utc日期时间
datetime.datetime.strptime("2018-10-11", "%Y-%m-%d")  # 将日期字符串转换为datetime
dt.strftime("%Y-%m-%d")
#+END_SRC

** 时区转换
#+BEGIN_SRC python
import datetime
from datetime import timezone

# 通过utcnow拿到当前的UTC时间, 再转换为任意时区的时间
utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc)
bj_dt = utc_dt.astimezone(timezone(timedelta(hours=8)))

# 任何带有时区的datetime都可以正确的转换为其他时区的时间
tokyo_dt = bt_dt.astimezone(timezone(timedelta(hours=9)))
#+END_SRC

* 装饰器
from contextlib import closing, contextmanager

* urllib - python3
urllib的request模块可以很方便的抓取URL内容
#+BEGIN_SRC python
from urllib import request

with request.urlopen('https://api.douban.com/v2/book/2129650') as f:
    data = f.read()

req = request.Request('http://www.douban.com/')
req.add_header('User-Agent', 'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25')
with request.urlopen(req) as f:
    data = f.read()

# 使用代理
proxy_handler = urllib.request.ProxyHandler({'http': 'http://www.example.com:3128/'})
proxy_auth_handler = urllib.request.ProxyBasicAuthHandler()
proxy_auth_handler.add_password('realm', 'host', 'username', 'password')
opener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)
with opener.open('http://www.example.com/login.html') as f:
    pass
#+END_SRC

* psutil
用于获取获取系统的一些运行信息.
* 异步IO
** 协程
python对协程的支持是通过generator实现的.
#+BEGIN_SRC python
def product():
    r = ''
    while 1:
        n = yield r
        if not n:
            return
        print("Generator One")
        r = 'success'

def consumer(p):
    p.send(None)  # 启动协程
    count = 0
    while count < 5:
        count += 1
        r = p.send(count)
        print("consumer get:", r)
    p.close()
p = product()
consumer(p)
#+END_SRC

** asyncio - python3.4+
[[http://python.jobbole.com/88427/][参考资料]]

asyncio的编程模型就是一个消息循环, 从asyncio的模块中直接获取一个EventLoop的引用, 然后把需要执行
的协程扔到EventLoop中执行.
#+BEGIN_SRC python
import asyncio

@asyncio.coroutine
def hello():
    print("Hello")
    r = yield from asyncio.sleep(1)
    print("Hello Again")


loop = asyncio.get_event_loop()
tasks = [hello(), hello()]
# loop.run_until_complete(hello())
loop.run_until_complete(asyncio.wait(tasks))
loop.close()

# 抓取网页
import asyncio

@asyncio.coroutine
def wget(host):
    print("wget {}...".format(host))
    connect = asyncio.open_connection(host, 80)
    reader, writer = yield from connect
    header = 'GET / HTTP/1.0\r\nHost: {}\r\n\r\n'.format(host)
    writer.write(header.encode("utf-8"))
    yield from writer.drain()
    while True:
        line = yield from reader.readline()
        if line == b'\r\n':
            break
        print("{} header > {}".format(host, line.decode("utf-8")))
    writer.close()

loop = asyncio.get_event_loop()
tasks = [wget(host) for host in ["www.sina.com", "www.baidu.com"]]
loop.run_until_complete(asyncio.wait(tasks))
loop.close()
#+END_SRC

使用python3.5+以上的代码可以简化为:
#+BEGIN_SRC python
async def hello():
    print("Hello")
    r = await asyncio.sleep(1)
    print("Hello Again")
#+END_SRC

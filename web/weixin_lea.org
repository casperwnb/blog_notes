* 微信公众平台
** 简介
微信公众平台上线于2012年08月底, 在2013年8月的时候分成订阅号和服务号,2014年9月的时候新增了企业号.
在微信公众平台注册一个微信公众号的时候需要选择注册什么类型的公众号.
公众号的类型分为三种: 分别是服务号、订阅号和企业号.

** 服务号和订阅号的区别
1. 推送频率
   服务号每月能推送4条消息
   订阅号每天可推送一条消息
2. 功能
   服务号开放出了更多高级功能
   订阅号开放的功能相对有限
   如图所示: [[file:images/wxservice.jpg][服务号与公众号功能的区别]]
3. 消息接受上的区别
   服务号显示在微信对话框中
   公众号显示在文件夹中

记住一点: 服务号是功能服务, 订阅号是传播资讯, 企业号是员工管理.

* 微信开放平台
** 平台定位
主要面对移动应用/网站应用开发者, 为其提供微信登录、分享、支付等相关权限和服务.

** 接入步骤
比如京东APP需要使用微信登录、分享和微信支付功能, 首先注册微信开发平台-开发者账号,
并按照流程在微信开放平台创建京东APP.

* 微信小程序
[[file:content/wx_xiaochengx_lea.org][微信小程序学习]]

* 微信公众号开发
** 开始准备
[[https://mp.weixin.qq.com/wiki?t%3Dresource/res_main&id%3Dmp1472017492_58YV5][微信公众号开发入门指引]]

1. 注册公众号, 准备服务器
2. 注册好公众号之后, 登录公众号, 选择菜单栏中的"开发"->"基本配置", 在服务器配置中填写服务器地址
   如: http://ip/wxbind, Token随便填一个, 消息加密密钥使用随机生成一个.
3. 在服务器上搭建服务, 绑定代码如下:
   #+BEGIN_SRC python tornado
class WXServerBind(tornado.web.RequestHandler):
    def get(self):
        try:
            signature = self.get_argument("signature")
            timestampe = self.get_argument("timestamp")
            nonce = self.get_argument("nonce")
            echostr = self.get_argument("echostr")
            token = "weixin"

            encrypt_lst = [token, timestampe, nonce]
            encrypt_lst.sort()

            sha1 = hashlib.sha1()
            map(sha1.update, encrypt_lst)
            hashcode = sha1.hexdigest()

            if hashcode == signature:
                self.write(echostr)
            else:
                self.write("")
        except Exception:
            log.info("trace: {}".format(traceback.format_exc()))

    def post(self):  # post方法中用于处理微信消息
        pass
   #+END_SRC

** 创建菜单
自定义菜单接口可以实现两种类型的按钮,
click: 用户点击click类型按钮后, 微信服务器会通过消息接口推送消息类型为event的结构给开发者,
并且带上按钮中开发者填写的key值, 开发者可以通过自定义的key值与用户进行交互.

view: 用户点击view类型按钮后, 微信客户端将会打开开发者在按钮中填写的url值, 可以与网页授权获取
用户基本信息接口相结合, 获得用户的登入个人信息.

* 公众号错误处理
** 获取access_token时errcode为-1000
原因是ip没有添加白名单

** 创建菜单errcode:48001
原因是没有该接口的权限, 可以申请测试账号
类似于创建菜单等这样的接口, 可以单独在其他项目或url路径中调用

* 坐标体系
WGS-84坐标系(World Geodetic System-1984 Coordinate System): 是一种国际上采用的地心坐标系.
坐标原点为地球质心, 其地心空间直角坐标系的Z轴指向BIH(国际时间服务机构)1984.O定义的协议地球极(
CTP)方向, X轴指向BIH 1984.O的零子午面和CTP赤道的交点, Y轴与Z轴、X轴垂直构成右手坐标系,
称1984年世界大地坐标系统, 该坐标系统俗称为地球坐标系, 目前GPS所采用的坐标系统.

GCJ-02: 中国国家测绘局订制的地理信息系统的坐标系统, 是一种对经纬度数据的加密算法, 即加入随机
的偏差, 国内出版的各种地图系统必须至少采用GCJ-02对地理位置进行首次加密. 该坐标系统俗称为
"火星坐标系"

百度坐标系统: 百度公司的地图坐标系统, 在国家测绘局的GCJ-02的基础上, 进行了BD-09二次加密.
百度地图支持将WGS-84坐标和GCJ-02坐标系转换成百度坐标.

* 公众号开发
SmartWeatherAPI(SWA接口)是中国气象局推出的手机气象服务客户端API.
* 企业微信开发
** 企业微信应用开启API接收消息
1. 自建一个应用
2. 点击刚创建的应用并进入 -> "接收消息"中的设置API接收 -> 然后填写相关数据
3. 点击URL提示栏中的"获取帮助"链接, 获取具体的信息
4. 进入链接后, 滚动页面, 找到"加解密方案说明"链接, 并进入
5. 找到"使用已有库"的位置, 然后点击"下载地址"链接
6. 下载对应语言的库
7. 在填写的url指定的服务器上编写服务验证代码, 代码如下:
   #+BEGIN_SRC python
import from WXBizMsgCrypt import WXBizMsgCrypt

class QYWXServerBind(tornado.web.RequestHandler):
    def get(self):
        try:
            sVerifyMsgSig = self.get_argument("msg_signature")
            sVerifyTimeStamp = self.get_argument("timestamp")
            sVerifyNonce = self.get_argument("nonce")
            sVerifyEchoStr = self.get_argument("echostr")

            # 与API设置中的值一致
            sToken = "ytYlmcfTOmePeychiFBQ7"
            sEncodingAESKey = "wYWbinMOGJetKFDesXzgqpXm5sMWdp6hMtd3m2CUW1l"
            sCorpID = "ww0b38f5a099230185"  # 微信企业号ID

            wxcpt = WXBizMsgCrypt(sToken, sEncodingAESKey, sCorpID)
            ret, hashCode = wxcpt.VerifyURL(sVerifyMsgSig, sVerifyTimeStamp, sVerifyNonce, sVerifyEchoStr)

            log.info("ret={}, hashCode:{}, msgCode:{}, echostr={}".format(
                ret, hashCode, sVerifyMsgSig, sVerifyEchoStr))

            if ret == 0:
                self.write(hashCode)
            else:
                self.write("")
        except Exception:
            log.info("trace: {}".format(traceback.format_exc()))   
   #+END_SRC
8. 回到最开始设置API的页面, 点击保存即可, 如果提示"URL验证失败", 可以慢慢调试.
** 企业微信服务商
需要申请为企业微信服务商.

然后在"标准应用服务"标签页中创建应用 -> "网页应用" -> 创建应用, 注意在配置的时候, 数据回调URL的
格式类似于: http://domain/<callback>?corpid=$CORPID$

数据回调和指令回调使用的解码方法一致. 在验证URL时会发送GET请求, 验证代码如下:
[[file:content/WXBizMsgCrypt.py][WXBizMsgCrypt.py]]

#+BEGIN_SRC python
import WXBizMsgCrypt

class QYWXBack(tornado.web.RequestHandler):
    def get(self):
        try:
            sVerifyMsgSig = self.get_argument("msg_signature")
            sVerifyTimeStamp = self.get_argument("timestamp")
            sVerifyNonce = self.get_argument("nonce")
            sVerifyEchoStr = self.get_argument("echostr")
            # 企业微信服务号
            sToken = "CogFOOeTBcBXz951afjQrctQsBABE"
            sEncodingAESKey = "4OXLQci86J2XdBkn4KxdfqKPrXg1lLwRIkbQyybsh14"
            sCorpID = "ww0ff7a560a471cee8"

            wxcpt = WXBizMsgCrypt(sToken, sEncodingAESKey, sCorpID)
            ret, hashCode = wxcpt.VerifyURL(sVerifyMsgSig, sVerifyTimeStamp, sVerifyNonce, sVerifyEchoStr)


            log.info("ret={}, hashCode:{}, msgCode:{}, echostr={}".format(
                ret, hashCode, sVerifyMsgSig, sVerifyEchoStr))

            if ret == 0:
                # 验证成功后, 返回hashCode
                self.write(hashCode)
            else:
                self.write("")
        except Exception:
            log.info("trace: {}".format(traceback.format_exc()))
    
#+END_SRC

验证通过之后, 在数据回调和命令回调时使用POST方法.

** 在企业微信服务商账号中开发
在其他企业微信安装这个应用之后, 企业微信为提交POST请求到服务器, 处理代码如下:
#+BEGIN_SRC python
class QYWXCmdBack(tornado.web.RequestHandler):
    def post(self):  # 安装应用回调
        """
        回调POST数据是: 
        <xml>
            <SuiteId><![CDATA[wxfc918a2d200c9a4c]]></SuiteId>
            <AuthCode><![CDATA[AUTHCODE]]></AuthCode>
            <InfoType><![CDATA[create_auth]]></InfoType>
            <TimeStamp>1403610513</TimeStamp>
        </xml>	
        """
        try:
            global suiteAccessToken
            sReqMsgSig = self.get_argument("msg_signature")
            sReqData = self.request.body
            sReqTimeStamp = self.get_argument("timestamp")
            sReqNonce = self.get_argument("nonce")

            sToken = "CogFOOeTBcBXz951afjQrctQsBABE"
            sEncodingAESKey = "4OXLQci86J2XdBkn4KxdfqKPrXg1lLwRIkbQyybsh14"
            sCorpID = "ww816984a2bf073e4d" # suitid, 企业微信服务商的

            wxcpt = WXBizMsgCrypt(sToken, sEncodingAESKey, sCorpID)
            ret, sMsg = wxcpt.DecryptMsg(sReqData, sReqMsgSig, sReqTimeStamp, sReqNonce)
            log.info("ret={}, msg={}".format(ret, sMsg))
            xmlTree = ET.fromstring(sMsg)
            log.info("xmlTree:{}, xmlData:{}".format(dir(xmlTree), xmlTree))
            infoType = xmlTree.find("InfoType").text
            if infoType == "create_auth":  # 安装应用
                log.info("Global suitAccessToken:{}".format(suiteAccessToken))
                url = "https://qyapi.weixin.qq.com/cgi-bin/service/get_permanent_code?suite_access_token={}"
                data = {
                    "auth_code": xmlTree.find("AuthCode").text
                }
                req = requests.post(url.format(suiteAccessToken), json.dumps(data))
                jsonData = req.json()
                log.info("CreateAuth:{}".format(jsonData))

            elif infoType == "suite_ticket":
                suiteTicket = xmlTree.find("SuiteTicket").text
                suiteAccessToken = self.getSuitAcessCode(suiteTicket)

            self.write("success")
        except Exception:
            log.info("TraceBack:{}".format(traceback.format_exc()))
            self.write("")

#+END_SRC

* 企业微信接口
http://open.weixin.qq.com/connect/oauth2/authorize?appid=$CORPID$&redirect_uri=http://qy.aibaodata.com/homeback&response_type=code&scope=snsapi_userinfo&agentid=$AGENTID$&state=1#wechat_redirect

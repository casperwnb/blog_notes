* 配置SSL时, 浏览器报ERR_SSL_PROTOCOL_ERROR
之前在配置时"listen 443;"没有添加"ssl", 添加ssl之后, 就可以啦.
#+BEGIN_SRC conf
server {
    # 使用http2需要nginx1.9.7+
    listen  443 ssl http2 default_server;
    listen  [::]:443 ssl http2 default_server;
    server_name  <xxxx>
    root  /usr/share/nginx/html;

    # ssl证书文件
    ssl_certificate "<crt_path>";
    ssl_certificate_key "<key_path>";
    ssl_session_cache shared:SSL:1m;
    ssl_session_timeout  10m;

    # 只允许TLS协议
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    #Solo queremos encriptacion descente, 由服务器协商最佳的加密算法
    ssl_prefer_server_ciphers on;
    # ssl_ciphers 表示加密套件, 感觉像是一些加密算法的组合形式
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK';

    # DH-Key交换密钥文件位置
    ssl_dhparam /etc/ssl/certs/dhparam.pem;  # 使用openssl dhparam -out dhparam.pem 4096生成
    # 生成该文件会需要很长的时间, 如果是在服务器上, 可以使用screen来生成该文件, 也可以从其他地方
    # 拷贝过来该文件. 测试时, 大概跑了77m左右
    # Load configuration files for the default server block.
    include /etc/nginx/default.d/*.conf;
    location /static {
        root /opt;
    }
	
    location /wapp {
        proxy_pass http://wx-backend-new;
    }

    proxy_set_header        X-Real-IP       $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    location / {
        proxy_pass http://127.0.0.1:8080;
    }

    error_page 404 /404.html;
        location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
        location = /50x.html {
    }
}
#+END_SRC

* nginx request entity too large
原因: nginx会返回413, Request Entity Too large, nginx默认限制1M

在nginx的配置文件中找到htt{...}, 在http中新增配置如下:
client_max_body_size 20m;  // 设置body最大为20M

然后重启nginx即可.
* 使用nginx配置登录
1. 先使用htpasswd命令生成用户名和密码文件
   htpasswd -bc <filepath> <USERNAME> <PASSWORD>
2. 配置nginx
   #+BEGIN_SRC conf nginx.conf
server {
    # ... 其他的设置
    location / {
        auth_basic "Restricted";
        auth_basic_user_file  <htpasswd-genfile>;
    }

    location /nopwd {
        auth_basic off;  # 关闭登录验证
    }
}
   #+END_SRC

* nginx使用自签名证书
1. 创建CA
   CA包含公钥与私钥, 私钥用于给其他证书签名, 公钥用于别人验证证书的有效性.
   echo 01 > ca.srl
   openssl genrsa -des3 -out ca-key.pem 2048

   openssl req -new -x509 -days 365 -key ca-key.pem -out ca.pem
2. 为nginx创建证书
   openssl genrsa -des3 -out server-key.pem 2048
   openssl req -subj '/CN=dev.regisry.com' -new -key server-key.pem -out server.csr
   openssl x509 -req -days 365 -in server.csr -CA ca.pem -CAkey ca-key.pem -out server-cert.pem

   openssl rsa -in server-key.pem -out server-key.pem  # 删除server key中的passphrase

   更改证书名称:
   cp server-cert.pem server-cert.crt
   cp server-key.pem server-key.key
3. 修改配置文件
#+BEGIN_SRC conf nginx.conf
server {
    listen 443;
    ssl on;
    ssl_certificate /root/ssl/server-cert.crt;
    ssl_certificate_key /root/ssl/server-key.key;
}
#+END_SRC
4. 给系统安装CA
   update-ca-trust enable
   cp ca.pem /etc/pki/ca-trust/source/anchors/ca.crt
   update-ca-trust extract
* Nginx切换upstream时, 产生502
原因是check_mode模块的default_down=True
解决方法就是将该字段设置为False

* TimSort
https://hackernoon.com/timsort-the-fastest-sorting-algorithm-youve-never-heard-of-36b28417f399

* 欧几里得算法
用于求两个数的最大公约数的算法, 最简单的实现是使用辗转相除(减)法.
#+BEGIN_SRC c
int gcd(int A, int B) {
    if (B == 0) {  // 递归调用, 需要注意退出条件
        return A;
    }
    else {
        while (A >= B) {
            A -= B;
        }

        int tmp = A;
        A = B;
        B = tmp;
        return gcd(A, B);
    }
}
#+END_SRC

* 快速排序算法
#+BEGIN_SRC python  排序思路
def quicksort(A):
  if len(A) < 2:
    return A

  povit = A[0]
  less = [i for i in A[1:] if i <= povit]  # 比i小的数
  greater = [i for i in A[1:] if i > povit]  # 比i大的数

  return quicksort(less) +[povit] + quicksort(greater)
#+END_SRC

#+BEGIN_SRC c
void quicksort(int *a, int left, int right) {
    if(left > right) {
        return;
    }

    int i=left, j=right, povit=a[left], tmp;
    while(i!=j) {
        while(a[j]>=povit && j>i) --j; // 从右往左找到第一个小于哨兵的值
        while(a[i]<=povit && j>i) ++i; // 从左往右找到第一个大于哨兵的值

        if(i < j) { // 交换两个值
            tmp = a[i];
            a[i] = a[j];
            a[j] = tmp;
        }
    }
    a[left] = a[i];  // 将哨兵数归位
    a[i] = povit;

    quicksort(a, left, i-1);
    quicksort(a, i+1, right);
}
#+END_SRC
* 算法解答
1. 算数问题
   [[file:algorithmCode/my01.org][算数问题]]
2. 开灯问题
   [[file:algorithmCode/my02.org][开灯问题]]
3. 蛇形填数
   [[file:algorithmCode/my03.org][蛇形填数]]
4. 回文词
   [[file:algorithmCode/my04.org][回文词]]
5. 猜数字游戏提示
   [[file:algorithmCode/my05.org][猜数字游戏提示]]
6. 环状序列
   [[file:algorithmCode/my06.org][环状序列]]

* 理解了很久的题目
1. 如果x加上x的各个数字之和得到y，就说x是y的生成元。给出n（1≤n≤100000），求最小生成元。
   无解输出0。例如：n=216，121，2005时的解分别为198，0，1979
   #+BEGIN_SRC c

int main() {
    int a[100005] = {};
    for(int i=1; i<=100000; ++i) {
        int m = i, y = i;
        while(m>0) { y += m % 10; m /= 10; }
        if(y > 100000) continue;
        if(a[y] == 0 || a[y] > m) a[y] = m;
    }

    int n;
    scanf("%d", &n);
    printf("%d\n", a[n]);
}
   #+END_SRC
* 算法精解 - C语言描述读书笔记
* 排序算法
** 桶排序
最简单的桶排序
#+BEGIN_SRC c  排序0~10之间输入的数
int main() {
    int bucket[] = {0};
    for(int i=0; i<10; ++i) {
        bucket[i] = 0; // 初始化每个数字出现的次数为0
    }

    int n, count=9;
    while(count--) {
        scanf("%d", &n);
        bucket[n] += 1;
    }

    for(int i=0; i<10; ++i) {
        for(int j=1; j<=bucket[i]; ++j)  printf("%d ", i);
        printf("\n");
    }
    return 0;
}
#+END_SRC

** 冒泡排序
基本思想: 每次比较两个相邻的元素, 如果顺序错误就把他们交换过来
#+BEGIN_SRC c
void bubblesort(int *a, int n) {
    for(int i=0; i<n-1; i++) {  // n个元素, 需要比较n-1趟
        for(int j=0; j<n-i-1; j++) {  // 每一趟就会确定一个元素的正确位置
            if(a[j] > a[j+1]) {
                int t = a[j];
                a[j] = a[j+1];
                a[j+1] = t;
            }
        }
    }
}
#+END_SRC

* 算法学习技巧
1. 边学边练, 适度刷题
2. 多问、多思考、多互动
3. 打怪升级学习法 - 在学习过程中给自己立一个flag
4. 知识需要沉淀, 不要试图一下掌握所有

* 时间复杂度分析
** 概念
时间复杂度全称是渐进时间复杂度, 表示算法的执行时间与数据规模之间的增长关系.
空间复杂度全称是渐进空间复杂度, 表示算法的存储空间与数据规模之间的增长关系.

时间复杂度的计算方法:
1. 只关注执行循环次数最多的一段代码
2. 加法法则: 总复杂度等于量级最大的那段代码的复杂度
3. 乘法法则: 嵌套代码的复杂度等于嵌套内外代码复杂度的乘积

将时间复杂度为非多项式量级的算法问题叫做NP(Non-Deterministic Polynomial, 非确定多项式)问题

** 分类
4个复杂度分析方面的知识点:
最好情况时间复杂度(best case time complexity): 在最理想的情况下, 执行这段代码的时间复杂度
最坏情况时间复杂度(worst case time complexity): 在最糟糕的情况下, 执行这段代码的时间复杂度
平均情况时间复杂度(average case time complexity): 全称应该叫做加权平均时间复杂度或期望时间复杂度
均摊时间复杂度(amortized time complexity)

** 均摊时间复杂度
只在某些情况下用到, 而均摊时间复杂度的应用场景比其它更加特殊、更加有限.
* 算法原理
** 鸽巢原理
也叫抽屉原理, 是Ramsey定理的特例. 也是研究离散问题中存在性问题的方法.

第一抽屉原理:
1. 把n+1个物体放入n个盒子里, 则至少有一个盒子里含有两个或两个以上的物体.
2. 把mn+1(n!=0)个物体放到n个抽屉中, 则至少有一个抽屉里不少于m+1的物体

第二抽屉原理:
将mn-1个物体放入n个抽屉中, 其中必有一个抽屉不多余m-1个物体

该原理只能用来解决存在性问题.

*** 题目解析
1. 证明从{1, 2, 3, ..., 3n}中选择n+1个整数, 则总存在两个整数他们之间的差最多为2
   解: 分组化简. 将这3n个整数分组为{1, 2, 3}, {4, 5, 6}, ..., {3n-2, 3n-1, 3n}共n组.
   这样题目就等价于: 将n+1个整数放在n个盒子里. 根据原理, 至少存在一个盒子里有取出两个数的.
2. 证明对于任意给定的52个整数, 存在其中的两个整数, 要么两者的和能被100整除, 要么两者之差能被100
   整除.

   解: 使用分组, 将数据按如下的方式分组: {+0,-0, +100, -100, ...}, {+1, -1, +99, -99, ...}, ...,
   {+50, -50, +150, -150, ...}. 这样将所有能被100整数的数分为51组, 必将有两个数属于同一组, 得证
4. 一位国际象棋大师有11周的时间备战, 决定每天至少下一盘棋, 但每周不超过12盘棋, 证明存在连续若
   干天, 期间这位大师恰好下了21盘棋.

   解: 设a1为第一天下棋的盘数, a2是第一天与第二天下棋的总盘数, a3是第一天、第二天、第三天下棋的
   总盘数, 以此类推. 因为每天至少要下一盘棋, 所以a1, a2, a3, ...是一个严格单调递增的序列. a1>=1,
   而且任意一周下棋的数量最多是21盘, 所以11个周下棋的总盘数不会超过11*12=132.
   
   因此可以写出如下的不等式:
   1<=a1<a2<a3<...<a77<=132(总共77天, 序列为77即可)
   该序列每一项加上21后也是严格递增的序列,
   21<=a1+21<a2+21<...<a77+21<=132+21

   这两个序列的取值范围为1~153, 两个序列一共出现了154个数字, 因此这两个序列必定存在两个数相等.
   
*** 延展
中国剩余定力, 有理数循环小数, Ramsey定理.

* TimSort
https://hackernoon.com/timsort-the-fastest-sorting-algorithm-youve-never-heard-of-36b28417f399

* 欧几里得算法
用于求两个数的最大公约数的算法, 最简单的实现是使用辗转相除(减)法.
#+BEGIN_SRC c
int gcd(int A, int B) {
    if (B == 0) {  // 递归调用, 需要注意退出条件
        return A;
    }
    else {
        while (A >= B) {
            A -= B;
        }

        int tmp = A;
        A = B;
        B = tmp;
        return gcd(A, B);
    }
}
#+END_SRC

* 快速排序算法
#+BEGIN_SRC python  排序思路
def quicksort(A):
  if len(A) < 2:
    return A

  povit = A[0]
  less = [i for i in A[1:] if i <= povit]  # 比i小的数
  greater = [i for i in A[1:] if i > povit]  # 比i大的数

  return quicksort(less) +[povit] + quicksort(greater)
#+END_SRC

#+BEGIN_SRC c
void quicksort(int *a, int left, int right) {
    if(left > right) {
        return;
    }

    int i=left, j=right, povit=a[left], tmp;
    while(i!=j) {
        while(a[j]>=povit && j>i) --j; // 从右往左找到第一个小于哨兵的值
        while(a[i]<=povit && j>i) ++i; // 从左往右找到第一个大于哨兵的值

        if(i < j) { // 交换两个值
            tmp = a[i];
            a[i] = a[j];
            a[j] = tmp;
        }
    }
    a[left] = a[i];  // 将哨兵数归位
    a[i] = povit;

    quicksort(a, left, i-1);
    quicksort(a, i+1, right);
}
#+END_SRC
* 算法解答
1. 算数问题
   [[file:algorithmCode/my01.org][算数问题]]
2. 开灯问题
   [[file:algorithmCode/my02.org][开灯问题]]
3. 蛇形填数
   [[file:algorithmCode/my03.org][蛇形填数]]
4. 回文词
   [[file:algorithmCode/my04.org][回文词]]
5. 猜数字游戏提示
   [[file:algorithmCode/my05.org][猜数字游戏提示]]
6. 环状序列
   [[file:algorithmCode/my06.org][环状序列]]

* 理解了很久的题目
1. 如果x加上x的各个数字之和得到y，就说x是y的生成元。给出n（1≤n≤100000），求最小生成元。
   无解输出0。例如：n=216，121，2005时的解分别为198，0，1979
   #+BEGIN_SRC c

int main() {
    int a[100005] = {};
    for(int i=1; i<=100000; ++i) {
        int m = i, y = i;
        while(m>0) { y += m % 10; m /= 10; }
        if(y > 100000) continue;
        if(a[y] == 0 || a[y] > m) a[y] = m;
    }

    int n;
    scanf("%d", &n);
    printf("%d\n", a[n]);
}
   #+END_SRC
* 算法精解 - C语言描述读书笔记
* 排序算法
** 桶排序
最简单的桶排序
#+BEGIN_SRC c  排序0~10之间输入的数
int main() {
    int bucket[] = {0};
    for(int i=0; i<10; ++i) {
        bucket[i] = 0; // 初始化每个数字出现的次数为0
    }

    int n, count=9;
    while(count--) {
        scanf("%d", &n);
        bucket[n] += 1;
    }

    for(int i=0; i<10; ++i) {
        for(int j=1; j<=bucket[i]; ++j)  printf("%d ", i);
        printf("\n");
    }
    return 0;
}
#+END_SRC

** 冒泡排序
基本思想: 每次比较两个相邻的元素, 如果顺序错误就把他们交换过来


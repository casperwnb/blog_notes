* 第一章 - 入门
** 建议
编程不是看会的, 也不是听会的, 而是练会的. 千万不要图快——如果没有足够的时间用来实践,
那么学得快, 忘得也快.

在算法竞赛中, 输入前不要打印提示信息. 输出完毕后应立即终止程序, 不要等待用户按键,
因为输入输出过程都是自动的, 没有人工干预.

在uva做题的时候, 如果提示"Presentation Error, PE", 则表示格式错误.

** 一些简单的小技巧
一般来说,只要在程序中用到了数学函数,就需要在程序最开始处包含头文件math.h, 并在编译时连接数学库.

*** 声明较大内存的数组
在函数内部是无法申请较大内存的数组, 此时可以放在main函数外部

*** printf控制输出长度
printf("%.*lf", 2, 1.12345); // 控制小数点后两位
*** 输入输出语句
#+BEGIN_SRC c
int main() {
    int a, b;
    // scanf()函数有返回值且为int型, 
    // scanf()函数返回的值为: 正确按指定格式输入变量的个数; 也即能正确接收到值的变量个数
    // 当scanf函数的第一个变量格式不正确时返回值为0, 即当scanf函数的第n个变量格式不正确时,
    // 返回值为n-1
    // scanf在读取输入数据时, 在碰到空白符时就会停止读取数据
    scanf("%d  %d", &a, &b);
    printf("%d, %d\n", a, b);

    int c;
    int x = scanf("%d %d %d", &a, &b, &c);
    printf("x=%d\n", x);  // 如果输入为1 2 3, 则x=3; 输入为1 2 d, x=2; 输入为1 a b, x=1;

    // 遇到输入错误, scanf函数会立即终止, 返回已经成功读取的数据的个数.
    // scanf 函数的返回值反映的是按照指定的格式符正确读入的数据的个数
    x = scanf("%d %d %d", &a, &b); // 输入为1 2 3,x=3, 因此3被丢弃了.

    // 动态的设置输出浮点数的精度, 其中的*号表示需要输出的精度, 这样精度就可以动态的传入
    printf("%.*f", 10, (double)1/3);

    // fgetc(fin) 读取一个打开的文件fin, 读取一个字符, 然后返回一个int值, 不返回char是因为
    // fgetc返回一个特定的标记EOF用于表示文件结束, 它并不是一个char, 如果将其返回值强制转换为
    // char, 将无法把特殊的EOF和普通字符区分开, 如果要从标准输入读取一个字符, 可以用getchar
    // 等价于fgetc(stdin), 一般在读取的时候应当先检查不是EOF之后再将其转换为char类型.
    // 不同操作系统的回车换行符是不一致的, Windows是"\r"和"\n"两个字符, Linux是"\n",
    // 而MacOS是"\r", 如果在Windows下读取Windows文件, fgetc和getchar会把"\r""吃掉",
    // 只剩下"\n"; 但如果要在Linux下读取同样一个文件, 它们会忠实地先读取"\r", 然后才是"\n".

    // fgets(buf, maxn, fin) 读取完整的一行. 这个函数读取不超过maxn-1个字符, 然后在末尾添上
    // 结束符"\0", 因此不会出现越界的情况. 之所以说可以用这个函数读取完整的一行, 是因为一旦读
    // 到回车符"\n", 读取工作将会停止, 而这个"\n"也会是buf字符串中最后一个有效字符(再往后就是
    // 字符串结束符"\0"了), 只有在一种情况下, buf不会以"\n"结尾: 读到文件结束符, 并且文件的
    // 最后一个不是以"\n"结尾

    int c, q = 1;
    while((c = getchar()) != EOF) {
        if(c == '"') {
            printf("%s", q ? "``" : "''");
            q = !q;  // 判断一个双引号是左双引号还是右双引号, 使用一个标志变量来处理
        } else
            printf("%c", c);
    }
    return 0;
}
#+END_SRC

*** 计算pi的值
#+BEGIN_SRC c
#include <stdio.h>
#include <math.h>

int main() {
    double pi = acos(-1.0);
    printf("%lf\n", pi);
    return 0;
}
#+END_SRC

*** 三角函数
c中的三角函数计算值默认使用弧度值, 弧度制与角度值的换算公式为:

弧度值 = 角度值 * pi / 180, 其中的pi就是3.14的那个pi
角度值 = 弧度值 * 180 / pi

*** 交换两个变量
#+BEGIN_SRC c 使用此方法会存在一个问题, 就是溢出, 但好像也不影响结果?
int main() {
    int a = 10, b = 20;
    a = a + b;
    b = a - b;
    a = a - b;
    return 0;
}

// 更推荐的做法
int main() {
    int a = 10, b = 20;
    a = a ^ b;
    b = a ^ b;
    a = a ^ b;
    return 0;
}
#+END_SRC

*** 逻辑运算符的短路操作
C 语言中的逻辑运算符都是短路运算符, 一旦能够确定整个表达式的值, 就不再继续计算.

*** 计算有符号类型int的最大值和最小值
#+BEGIN_SRC c
#include <stdio.h>
#include <limits.h>

int main() {
    unsigned int max = -1;  // 无符号整形的最大值
    unsigned int half_max = max / 2; // 有符号能表示的最大整形
    int signed_max = half_max;
    int signed_min = half_max + 1;  // 有符号的最小值, 因为+1后会溢出, 就变成有符号的最小值了

    if(signed_max == INIT_MAX) {
        printf("calculate right, max=%d\n", signed_max);
    } else {
        printf("calculate wrong\n");
    }
}
#+END_SRC

*** 减少四舍五入的误差
#+BEGIN_SRC c
#include <stdio.h>
#include <math.h>

int main() {
    int m = floor(sqrt(4.0) + 0.5);
    printf("%d\n", m);
    return 0;
}
#+END_SRC

*** 统计程序用时 - 计时函数的使用
#+BEGIN_SRC c  计算S = 1! + 2! + 3! + ... + n!的末尾6位数的值
#include <stdio.h>
#include <time.h>

int main() {
    int n;
    scanf("%d", &n);

    const int MOD = 1000000;
    int S = 0;
    int product = 1;
    for(int i=1; i<=n; ++i) {
        product *= i;
        product %= MOD;

        S += product;
        S %= MOD;
    }
    printf("%d\n", S);
    // 常数CLOCKS_PER_SEC和操作系统相关,不要直接使用clock()的返回值,而应总是除以CLOCKS_PER_SEC
    // clock()函数返回程序目前为止运行的时间.
    printf("Time Used=%.4f\n", (double)clock()/CLOCKS_PER_SEC);
    return 0;
}
#+END_SRC

*** 重定向输入输出以及文件操作
#+BEGIN_SRC c
#include <stdio.h>

int main() {
    int x, n;
    freopen("intput.txt", "r", stdin);  // 让scanf从input.txt文件中读取数据
    freopen("output.txt", "w", stdout);  // 让printf将内容输出到output.txt文件中
    x = scanf("%d %d %d", &n, &n, &n);
    printf("x=%d\n", x);

    FILE *fin, *fout; // FILE在头文件stdio.h中定义
    fin = fopen("data.in", "rb");
    fout = fopen("data.out", "wb");

    fscanf(fin, "%d", &x) == 1;  // 从文件中读取输入, 返回获取的数据个数
    fprintf(fout, "%d", x);  // 输出到文件
    fclose(fin);  // 文件使用完毕后, 需要关闭
    fclose(fout);

    // 如果想使用标准输入输出, 也可以使用如下的方法
    fin = stdin;
    fout = stdout; // 此时就不需要调用fclose()函数来关闭文件了

    fscanf(fin, "%d %d", &n, &n);

    // fscanf判断是否读取到文件尾
    if(fscanf(fin, "%d", &n) != EOF) {  // 判断是否读取到文件尾, 读到文件尾会返回EOF
    }

    if(fscanf(fin, "%d", &n) != 1) {} // 判断是否读取到文件尾
}
#+END_SRC

* 字符串操作
#+BEGIN_SRC c
void func() {
  char buf[20];

  sprintf(buf, "%d", 100);  // 将数字100转换为字符串100

  strchr(buf, '1');  // 判断字符1是否在buf中, 如果存在则返回一个指针, 不存在返回NULL

  strlen(buf);  // 返回字符串中的字符个数, 不包括末尾的'\0'
}

// 使用字符串操作的一个题目
/*
找出所有形如abc*de(三位数乘以两位数)的算式, 使得在完整的竖式中, 所有数字都属于一个特定的数字集合
输入数字集合(相邻数字之间没有空格), 输出所有竖式. 每个竖式前应有编号, 之后应有一个空行.
最后输出解的总数. 具体格式见样例输出(为了便于观察, 竖式中的空格改用小数点显示, 但所写程序中
应该输出空格, 而非小数点).
样例输入:
2357
样例输出:
<1>
..775
X..33
-----
.2325
2325.
-----
25575
The number of solutions = 1
*/
#include <stdio.h>
#include <string.h>

int main() {
  char buf[100], s[20];
  int count = 0;
  
  printf("please input a number: ");
  scanf("%s", s);
  for(int abc=100; abc<=999; ++abc) {
    for(int de=10; de<=99; ++de) {
      int x = abc * (de%10), y = abc * (de/10), z = abc * de;
      sprintf(buf, "%d%d%d%d%d", abc, de, x, y, z);  // 可以看做是字符拼接
      int ok = 1;
      for(int i=0; i<strlen(buf); ++i) {
        if(strchr(s, buf[i]) == NULL)
          ok = 0;
      }
      if (ok) {
        printf("<%d>\n", ++count);
        printf("%5d\nX%4d\n-----\n%5d\n%4d\n-----%5d\n", abc, de, x, y, z);
      }
    }
  }
  printf("the number of solutions = %d\n", count);
  return 0;
}
#+END_SRC
* 随机数
rand(), 头文件: cstdlib, 生成一个[0, RAND_MAX]闭区间内的一个数. RAND_MAX至少是32767(2^15 - 1)
此处生成的随机数是"伪随机", 因为它是由数学公式计算出来的.

需要随机数的程序在最开始的时候一般会调用srand(time(NULL)), 目的是初始化"随机种子".
种子是伪随机数计算的依据. srand只需要在程序开始处调用一次即可, 不要在同一个程序中多次调用.

* 算法精解 - 读书笔记
[[file:content/masteringalgorithwithccodeLea.org][算法精解读书笔记]]


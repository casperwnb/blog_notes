* 链表
** 写链表的方法
1. 理解指针或引用的含义
   指针: 将某个变量赋值给指针, 实际上就是将这个变量的地址赋值给指针. 反过来说, 指针中存储了这个变量
   的内存地址, 指向了这个变量, 通过指针就能找到这个变量.
2. 警惕指针丢失和内存泄漏
3. 利用哨兵简化实现难度
   此处的哨兵是用于解决"边界问题"的, 不直接参与业务逻辑
   如果引入哨兵, 在任何时候不管链表是否为空, head指针都会一直指向这个哨兵节点, 将有哨兵节点的链表
   叫做带头链表, 相反叫做不带头链表.
4. 留意边界条件处理
   检查链表代码是否正确的边界条件:
   a. 如果链表为空时, 代码是否正常工作
   b. 如果链表只含有一个节点, 代码是否正常工作
   c. 如果链表只包含两个节点时, 代码是否正常工作
   d. 代码逻辑在处理头节点和尾节点时候, 是否能正常工作
5. 举例图画, 辅助思考
6. 多些多练, 没有捷径

* 链表实现的几个操作
单链表反转
链表中环的检测
两个有序链表的合并
删除链表倒数第n个节点
求链表的中间节点.

LeetCode链表对应的题目:
206, 141, 21, 19, 876

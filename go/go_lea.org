* Go环境
国内访问go官网地址: https://golang.google.cn/
go1.5就实现了自举(即用go来实现go语言自身).

** 安装
从[[https://golang.google.cn/dl/][go官网]], 下载对应版本的二进制包, 解压后放置到某个目录、配置环境变量, 并通过go version来验证
是否安装成功.

一般需要配置3个环境变量: GOROOT, GOPATH, GOBIN. 最主要的是GOPATH环境变量.
GOPATH的值可以是一个目录路径, 也可以包含多个目录路径, 每个目录都代表一个工作区. 这些工作区
用于放置go语言的源码文件, 以及安装后的归档文件和可执行文件.

go语言项目在其生命周期内的所有操作(编码、依赖管理、构建、测试、安装等)基本上都是围绕着GOPATH
和工作区进行的.

** Go语言源码的组织方式
go语言的源码是以代码包为基本组织单位的, 在文件系统中, 这些代码包其实是与目录一一对应的. 目录可以
有子目录, 所以代码包也可以有子包.

一个代码包中可以包含任意个.go为扩展名的源码文件, 这些源码文件都需要被声明为属于同一个代码包.
如:
在目录a中新建一个a.go, 其代码如下
#+BEGIN_SRC go
//package b  // 在导入该包时, 就需要使用b.XXX来访问, 这样不利于代码的阅读, 正确的做法是:
package a

func Hello() {
}

// main.go
import ("a")

func main() {
    b.Hello()  // 此处就需要使用包名b, 而不是a, 因此为了代码的可读性
    // 最好是将.go文件所在的父目录的名字作为包名.
}
#+END_SRC
在工作区中, 一个代码包的导入路径实际上就是从src子目录到该包的实际存储位置的相对路径.

** 源码安装后的结果存放
在安装时, 如果产生了归档文件, 就会放进该工作区的pkg子目录中, 可执行文件会放到该工作区的bin目录中.
某个工作区的src子目录下的源码文件在安装后一般会被放置到当前工作区的pkg子目录下对应的目录中, 或者
直接放置在该工作区的bin子目录中.

** 构建和安装go程序的过程
构建和安装代码包的时候都会执行编译打包等操作, 并且这些操作生成的任何文件都会被先保存到某个临时
目录中. 如果构建的是库源码文件, 则操作结果文件只会存在于临时目录中, 这里的构建的主要意义在于
检查和验证.

如果构建的是命令源码文件, 则操作的结果文件会被搬运到源码文件所在的目录中.

安装操作会先执行构建, 然后会进行链接操作并将结果文件搬运到指定目录. 即如果安装的是库源码文件,
则结果文件会被搬运到它所在工作区的pkg目录下的某个子目录中, 命令源码文件会被搬运到它所在工作区
的bin目录中, 或环境变量GOBIN指向的目录中.

** go build命令一些可选项的用途和用法
运行go build命令时, 默认不会编译目标代码包所依赖的那些代码包, 如果被依赖的代码包的归档文件不存在
或源码文件有了变化, 还是会被编译. 如果想强制编译, 可以在执行命令时加上"-a". 此时目标代码包总是
会被编译, 它依赖的代码包也会被编译, 即使是标准库中的代码包也是如此.

-a  # 强制编译
-i  # 编译并安装归档文件
-x  # 可以查看go build命令具体执行了哪些操作
-n  # 只查看go build的具体操作而不执行它们
-v  # 可以查看go build命令编译的代码包的名称, 与-a搭配使用

go build之后会在当前路径下生成一个可执行文件

注意: go build, go install 只会执行gopath中最早发现包的工作区.

** go install
go install 用于安装二进制文件, 如果没有设置GOBIN, 则会默认安装在"工作区目录/bin"目录下

** go get
go get会自动从一些代码仓库中下载目标代码包, 并把它们安装到环境变量GOPATH包含的第一个工作区的
相应目录中, 如果存在GOBIN环境变量, 则包含命令源码文件的代码包会被安装到GOBIN指向的那个目录.

go get常用标记:
-u  # 下载并安装代码包, 不论工作区中是否已经存在他们
-d  # 值下载代码包, 不安装代码包
-fix  # 在下载代码包后先运行一个用于根据当前go语言版本修正代码的工具, 然后再安装代码包
-t  # 同事下载测试所需的代码包
-insecure  # 允许通过非安全的网络协议下载和安装代码包.

** go doc
go doc http.ListenAndServe  # 在本地查看ListenAndServe的注释信息

在需要导出的函数前写注释:
// <funcName> xxx
func funcName() {}

* GO基础知识
[[file:contents/goBase.org][Go基础知识]]

* Go高阶知识
[[file:contents/goAdvance01.org][go高阶知识01]]
[[file:contents/goAdvance02.org][go高阶知识02]]
[[file:contents/goAdvance03.org][go高阶知识03]]

* Go画图
GIF动画 P34

* Go库
[[file:contents/goLibrary.org][Go标准库]]

* Go官方版本管理工具 - dep
** 安装
[[https://github.com/golang/dep][github地址]]

brew install dep  # mac
brew upgrade dep  # mac

curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh  # Linux平台安装

** 使用 - 以一个例子来操作
1. 建立一个目录, 并将该目录加入到GOPATH环境变量中(src前的路径即可)
   mkdir ~/goWorkSpace/CasperCode/src
   然后配置环境变量:
   export PATH="~/goWorkSpace/CasperCode/"
   export PATH=$PATH:$(go env GOPATH)/bin
   export GOPATH=$(go env GOPATH)
2. 在src目录下再建立目录, 我理解的是该目录就是一个一个的工程了
   cd ~/goWorkSpace/CasperCode/src && mkdir demo
3. 进入工程目录
   cd demo && dep init -v  # 初始化

   注意: 如果需要将旧工程也使用dep来管理, 则将旧工程拷贝到src目下, 然后进入该目录执行
   dep init -v即可, dep会自动创建依赖
   
   执行该命令后, 会生成两个文件Gopkg.lock, Gopkg.toml和一个vender目录
   如果报错"Gopkg.toml and Gopkg.lock are out of sync"需要执行一下dep ensure -v

   Gopkg.toml: 是依赖管理的核心文件, 可以生成也可以手动修改
   Gopkg.lock: 是生成的文件, 不要手工修改
   vender目录是golang1.5以后依赖管理目录, 这个目录的依赖代码是优先加载的

   dep init大致会做如下几件事情:
   1. 利用gps分析当前代码包中的包依赖关系
   2. 将分析出的项目包的直接依赖约束写入项目根目录下的Gopkg.toml文件中
   3. 将项目依赖的所有第三方包在满足Gopkg.toml中约束范围内的最新信息写入Gopkg.lock中
   4. 创建root vender目录, 并且以Gopkg.lock为输入, 将其中的包下载到root vender下面

   如果对dep自动分析出来的各种约束和依赖的版本没有异议, 此时就可以将Gopkg.toml和Gopkg.lock
   文件作为项目的源码文件提交到版本库中. 是否提交vender下的依赖代码到代码仓库, 取决于自己.
   提交vender的好处是, 即便没有dep, 也可以实现真正的reproduceable build, 带代码厂库就变得
   异常庞大, 且更新vender时, 会有大量的diff会影响查看正常代码的提交.
      
** 其他命令
dep help ensure  # 依赖管理帮助
dep ensure -add <code_url>  # 添加一条依赖
dep ensure -add <code_url>@=0.4.3  # @=参数指定的是某个tag
dep ensure -v  # 添加之后一定要执行ensure, 确保同步
dep ensure -update -v  # 更新依赖
dep prune -v  # 删除没有用的package
dep status  # 查看当前依赖情况

在编辑Gopkg.toml文件后, 需要执行:
dep ensure -update -v && dep ensure -v

** dep cache
dep也是有本地缓存, 其缓存在$GOPATH/pkg/dep目录中

* Go管理工具 - glide
** 安装
go get github.com/Masterminds/glide
go install github.com/Masterminds/glide

** 使用
1. 在GOPATH指定的某个路径中的src目录中新建一个目录
   注意: 新建的该目录就可以当做一个项目工程的根目录
2. 在该目录中执行命令
   glide init
   glide install
   glide get --all-dependencies -s -v <codeurl>#tag
   
   --all-dependencies # 下载全部依赖
   -s  # 下载后删除.git目录
   -v  # 移除Godeps/_workspace等相关目录

   glide up  # 更新依赖

   go test $(go novendor)  # 运行测试, 但是不执行vendor目录中的测试

* Go语言学习路径
1. 通读go语言圣经
2. 阅读算法, 里边的所有的算法都用go实现一遍
3. 使用go编写一个博客系统
4. 阅读一个go编写的框架, 如gin框架
* Go经典问题
** 字典遍历
#+BEGIN_SRC go
type student struct {
	Name string
	Age  int
}

func pase_student() map[string]*student {
	m := make(map[string]*student)
	stus := []student{
		{Name: "zhou", Age: 24},
		{Name: "li", Age: 23},
		{Name: "wang", Age: 22},
	}

    for _, stu := rage stus {
        m[stu.Name] = &stu
    }

    /*
    // 正确写法
	for i, _ := range stus {
		stu := stus[i]
		m[stu.Name] = &stu
	}
    */
	return m
}
func main() {
	students := pase_student()
	for k, v := range students {
		fmt.Printf("key=%s,value=%v \n", k, v)
	}
}
#+END_SRC

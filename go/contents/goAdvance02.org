* 类型断言
** 类型断言
类型断言是一个使用在接口上的操作, 语法形如: x.(T)

如果断言操作的对象是一个nil接口值, 则不论被断言的类型是什么这个类型断言都会失败.

* GoRoutines与Channels
** 并发
顺序通信进程(communicating sequential processes)也叫CSP, 是一种现代的并发编程模型, 这种编程模型
中值会在不同的运行实例中(goroutine)中传递.

** goroutines
go中每一个并发的执行单元叫做一个goroutine. go程序启动时, 其主函数即在一个单独的goroutine中运行.
叫做main goroutiine. 新的goroutine会用go语句来创建.

主函数结束时, 所有的goroutine都会被退出. 除了主函数退出或者直接终止程序之外, 没有其他的编程
方法能够让一个goroutine来打断另一个的执行, 但可以通过goroutine之间的通信来让一个goroutine请求
其他的goroutine, 并让被请求的goroutine自行结束执行.

goroutine的调度器是GO语言运行时系统的重要组成部分, 主要负责统筹调配GO并发编程模型中的三个主要
元素, 即G(gorotuine的缩写), P(Processor的缩写), M(machine的缩写).
M指的是系统级线程, P是一种可以承载若干个G, 且能够使这些G适时地与M进行对接, 并得到真正运行的中介.

从宏观上说, G和M由于P的存在可以呈现出多对多的关系, 当一个正在与某个M对接并运行着的, 需要暂停时,
调度器会即时发现并把这个G与那个M分离开, 以释放计算资源供那些等待运行的G使用.
当一个G需要恢复运行的时候, 调度器又会尽快地为它寻找空闲的计算资源(包括M)并安排运行. 另外当M不够用
时, 调度器会向操作系统申请新的系统级线程, 而当某个M已无用时, 调度器又会负责把它即使的销毁掉.

** go的TCP服务端与客户端代码
#+BEGIN_SRC go
package main

import (
	"io"
	"log"
	"net"
	"time"
)

func main() {
    // 创建一个net.Listener对象, 该对象会监听一个网络端口上到来的连接.
	listener, err := net.Listen("tcp", "localhost:8080")
	if err != nil {
		log.Fatal(err)
	}

	for {
        // Accept方法会阻塞, 直到一个新的连接被创建, 然后返回一个net.Conn对象
		conn, err := listener.Accept()
		if err != nil {
			log.Print(err)
			continue
		}
		// handleConn(conn)  // 只能服务一个连接
        go handleConn(conn)  // 可以服务多个连接
        // go后跟的函数的参数会在go语句自身执行时被求值.
        // 例如: go echo(c, input.Text(), time.Second) // input.Text()会在main goroutine中被求值
	}
}

func handleConn(c net.Conn) {
	defer c.Close()

	for {
        // Format方法提供了一种格式化日期和时间信息的方式. 它的参数是一个格式化模板标识如何来
        // 格式化时间, 格式化模板限定为Mon Jan 2 03:04:05 PM 2006 UTC-0700共有8个部分.
        // 可以以任意的形式来组合前面这个模板, 出现在模板中的部分会作为参考来对时间格式进行输出
        // time包里定义了很多标准时间格式, 如time.RFC1123, 在进行格式化的逆向操作time.Parse时,
        // 也会用到同样的策略.
		_, err := io.WriteString(c, time.Now().Format("15:04:05\n"))
		if err != nil {
			return
		}
		time.Sleep(time.Second)
	}
}
#+END_SRC
运行这个程序之后, 可以使用netcat工具来执行网络连接操作.
nc localhost 8080

#+BEGIN_SRC go 客户端代码
func main() {
    conn, err := net.Dial("tcp", "localhost:8000")
    if err != nil {
        log.Fatal(err)
    }
    defer conn.Close()
    mustCopy(os.Stdout, conn)
}

func mustCopy(dst io.Writer, src io.Reader) {
    // Copy会一直读取数据, 直到遇到EOF或发生错误.
    if _, err := io.Copy(dst, src); err != nil {
        log.Fatal(err)
    }
}
#+END_SRC

** Channels
通道类型是并发安全的, 这也是go中唯一一个自带的可以满足并发安全的类型.

一个通道相当于一个先进先出的队列.
通道的基本特性:
1. 对于同一个通道, 发送操作之间是互斥的< 接收操作之间也是互斥的
   go运行时只会执行对同一个通道的任意个发送操作中的某一个, 直到该元素被完全复制进该通道.
   元素值从外界进入通道时会被复制, 即是原值的副本.
2. 发送和接受操作中对元素值的处理都是不可分割的
3. 发送操作在完全完成之前会被阻塞, 接收也是如此.

一个不使用接收结果的接收操作也是合法的.
对于一个关闭的channel执行发送操作将导致panic, 但可以执行接收操作.
对于一个关闭的channel执行关闭操作将导致panic, 因此为了保证程序的可靠性, 千万不要让接受方关闭通道,
而应该让发送方关闭通道.

使用make创建channel时, 默认第二个参数的值为0,此时就是无缓冲的channel,
当第二个参数的值大于1时, 就是带缓冲的channel.

基于无缓存channel的发送和接收将导致两个goroutine做一次同步操作.

非缓冲通道是在用同步的方式传递数据, 并且数据是直接从发送方复制到接受方的, 中间不会用非缓冲通道
做中转.

对于缓冲通道, 当发送在执行的时候发现空的通道中, 正好有等待的接收操作, 则直接会把元素值复制给
接收方. 反过来, 当接收操作在执行的时候发现满的通道中正好有等待的发送操作,
就会直接从发送方把元素值复制过来. #TODO: 后面这一句感觉有问题.

给nil通道发送任何值都会永久阻塞下去. 当只是声明一个通道时, 该值就是nil.

** 串联的channel - pipeline
不需要关闭每一个channel, 只要当需要告诉接受者goroutine, 所有的数据已经全部发送完成时才需要关闭
channel. 一个没有被引用的channel(不管该channel是否已经关闭)会被GC自动回收.

试图重复关闭一个channel将导致panic异常, 试图关闭一个nil值的channel也会导致panic, 关闭一个channel
还会触发一个广播机制.
#+BEGIN_SRC go
func main() {
    nums := make(chan int)
    squares := make(chan int)

    go func() {
        for i:=1; i<5; i++ {
            nums <- i
        }
        close(nums)  // 数据发送完毕, 关闭通道
    }()

    go func() {
        for x := range nums {
            squares <- x * x
        }
        close(squares)  // 数据计算完毕, 关闭通道
    }()

    for v := range squares {
        fmt.Println(v)
    }
}
#+END_SRC

** 单向通道
单向通道是只能发不能收, 或者只能收不能发的通道.
var useLessChan = make(chan<- int, 1)  // 声明了一个只发而不能收的通道
var receiveChan = make(<-chan int, 1)  // 声明了一个只收而不能发的通道

当一个channel作为一个函数参数时, 一般总是被用于只发送或只接受. 对一个只接收的channel调用close是
一个编译错误.

任何双向channel都可以自动转换为单向通道.

func square(in <-chan int, out chan<-int) {} // in是接收通道, out是发送通道

单向通道的应用价值: 最主要的用途就是约束其他代码的行为. 可用于编写模板代码或可扩展的程序库时.
Go中可以声明函数类型, 如果在函数类型中使用了单向通道, 就相当于在约束所有实现了这个函数类型的函数


** 缓冲通道
cap可以获取缓冲通道的大小, len返回缓冲通道中有效值的个数.
#+BEGIN_SRC go
func mirroredQuery() string {
    responses := make(chan string, 3)
    go func() { responses <- request("http://www.w1.com") }
    go func() { responses <- request("http://www.w2.com") }
    go func() { responses <- request("http://www.w3.com") }
    return <-responses  // 返回最先获取的数据
}
func request(hostname string) (response string) {}
#+END_SRC
以上代码如果使用了无缓冲的channel, 则两个慢的goroutine将会因为没有人接受而被永远卡住, 此时就发生
了goroutine泄漏, 这就在程序中隐藏了一个BUG. 泄漏的goroutine不会被自动回收.

一个有goroutine泄漏bug的程序示例:
#+BEGIN_SRC go
func makePic(fname []string) error {
    errors := make(chan error)
    for _, f := range fname {
        go func(f string) {
            _, err := thumbnail.ImageFile(f)
            errors <- err
        }(f)
    }

    for range fname {
        if err := <- errors; err != nil {
            return err
        }
    }
    return nil
}
#+END_SRC
产生goroutine泄漏的原因: 当遇到第一个非nil的error时, 函数会直接将error返回给调用方, 此时没有
一个goroutine去清空errors channel, 这样剩下的worker goroutine在向这个channel种发送值时, 都会
被永远阻塞下去, 且永远不会退出.

解决方法: 可以创建一个具有合适大小的缓冲通道(何为合适呢, 传入的长度为文件名slice的数组长度)
另一个方法是创建另一个goroutine, 当main goroutine返回第一个错误的同时去排空error channel.

为了知道最后一个goroutine什么时候结束, 需要一个递增的计数器, 在每个goroutine启动时加一,
在goroutine退出时减一. 这需要一种特殊的计数器, 这个计数器需要在多个goroutine操作时做到安全并且
提供在其减为0之前一直等待的一种方法, 这个计数类型被称为sync.WaitGroup, 例如:
#+BEGIN_SRC go
func makePic(fname <- chan string) int {
    sizes := make(chan int64)
    var wg sync.WaitGroup

    for f := range fname {
        wg.Add(1)
        go func(f string) {
            defer wg.Done()
            thumb, err := thumbnail.ImageFile(f)
            if err != nil {return}
            info, _ := os.Stat(thumb)
            sizes <- info.Size()
        }(f)
    }

    // wait done to close sizes
    go func() {
        wg.Wait()
        close(sizes)
    }()

    var total int64
    for size := range sizes {
        total += size
    }
    return total
}
#+END_SRC

注意Add和Done方法的不对称,Add是为计数器加1,必须在work goroutine开始之前调用,而不是在goroutine中.

** 通道中值的拷贝
如果是引用类型的, 则会是"浅拷贝", 如果是值则会深拷贝.
#+BEGIN_SRC go
type People struct {
    salary []int
    name string
}

func main() {
    ch := make(chan People)
    d1 := People{salary: []int{10000, 2000000}, name:"casper"}
    go func() { ch <- d1 }()

    d2 := <-ch
    d2.name = "candice"  // name是"深拷贝"
    d2.salary[0] = 10001  // salary是"浅拷贝"

    fmt.Println(d1, d2)
}
#+END_SRC

** select多路复用
select只能与通道联用, 一般由若干个分支组成. 分支分为两种: 一种是候选分支, 另一种是默认分支.
候选分支以case开头, 默认分支就是default case. 每个case表达式中都只能包含操作通道的表达式.

#+BEGIN_SRC go  倒计时
func main() {
    fmt.Println("Commencing countdown")
    tick := time.Tick(time.Second*1)  // 返回一个接受的通道, 执行间隔是传入的参数的值

    abort := make(chan int)
    go func() {
        os.Stdin.Read(make([]byte, 1))
        abort <- 1
    }()

    for countdown := 10; countdown > 0; countdown-- {
        fmt.Println(countdown)
        select {
            case <-tick:
            case <-abort:
                fmt.Println("Abort")
                return  // 此处会导致goroutine泄漏, 正确写法是使用time.NewTicker
        }
    }
    fmt.Println("Countdown Done")
}
#+END_SRC
Tick函数挺方便, 但只有当程序整个生命周期都需要这个时间时我们使用它才比较合适. 否则应该使用如下
方式:
ticker := time.NewTicker(1 * time.Second)
<-ticker.C
ticker.Stop()

一个没有任何case的select语句写作 select{}, 会永远等待下去.
#+BEGIN_SRC go
func main() {
    ch := make(chan int, 1)
    for i:=0; i<10; i++ {
        select {
            case x := <-ch:
                fmt.Println(x)  // 输出0, 2, 4, 6, 8. #DONE: 原因
            case ch <- i:
        }
    }
}
#+END_SRC
如果多个case同时就绪, select会随机选择一个执行.

通过命令行参数的开关来输出详细信息: 工作原理是=> 如果命令行参数中给定-v, 则tick通道就不为nil,
因此select会命中, 反之当tick为nil时, select永远不会命中这个case.
#+BEGIN_SRC go
func main() {
	var verbose = flag.Bool("v", false, "show verbose msg")
	flag.Parse()

	ch := make(chan int)
	var tick <-chan time.Time
	if *verbose {
		tick = time.Tick(time.Second)
	}

	go func() {
		for {
			fmt.Println("Do Something")
			time.Sleep(time.Second * 1)
			ch <- 1
		}
	}()

	for {
		select {
		case <-ch:
		case <-tick:
			fmt.Println("I'm Working")
		}
	}
}
#+END_SRC

使用select语句需要注意的事情:
1. 如果select有默认分支, 则不管通道操作是否有阻塞, select语句都不会被阻塞. 如果其他几个表达
   式都阻塞了, 即没有满足求值的条件, 则默认分支就会被选中并执行.
2. 如果没有加入默认分支, 则一旦所有的case表达式都没有满足求值条件, 则select就会被阻塞, 直到
   有一个case表达式满足条件
3. 最好是通过接受表达式的第二个结果值来判断通道是否关闭, 一旦发现某个通道关闭了, 就应该及时
   地屏蔽掉对应的分支或采取其他措施. 这对于程序的逻辑和程序性能都有好处.
4. select语句只能对其中的每个case表达式各求值一次, 如果想连续或定时地操作其中的通道的话,
   就往往需要通过在for语句中嵌入select语句的方式来实现. select中的break只能接收当前select语句的
   执行, 而不会对外层的for语句产生作用.

** select语句的规则
1. 对于每个case表达式, 都至少会包含一个发送或接收表达式, 同时也可能会包含其他的表达式.
2. select语句包含的候选分支中的case表达式都会在该语句执行开始时先被求值, 并且求值的顺序是
   从上到下的, 如果某个case有多个表达式, 会按照从左到右执行.
3. 对于每个case表达式, 如果其中的发送或接受表达式在被求值时处于阻塞状态, 则对该case表达式的
   求值就是不成功的. 即分支不满足条件.
4. 仅当select语句中所有case表达式都被求值完毕后, 才会开始选择候选分支. 此时会挑选满足条件的候选
   分支执行, 如果所有的候选分支都不满足条件, 默认分支就会被执行. 如果没有默认分支, 就会阻塞.
   参考代码:
   #+BEGIN_SRC go
var channels = [3]chan int{
	nil,
	make(chan int),
	nil,
}

var numbers = []int{1, 2, 3}

func main() {
	select {
	case getChan(0) <- getNumber(0):
		fmt.Println("The first candidate case is selected.")
	case getChan(1) <- getNumber(1):
		fmt.Println("The second candidate case is selected.")
	case getChan(2) <- getNumber(2):
		fmt.Println("The third candidate case is selected")
	default:
		fmt.Println("No candidate case is selected!")
	}
}

func getNumber(i int) int {
	fmt.Printf("numbers[%d]\n", i)
	return numbers[i]
}

func getChan(i int) chan int {
	fmt.Printf("channels[%d]\n", i)
	return channels[i]
}
   #+END_SRC
5. 如果select遇见发现同时有多个候选分支满足条件, 就会使用一种伪随机算法选择一个执行, 即使select
   是在唤醒时发现的这种情况, 也会这样做.
6. 一条select语句只能有一个默认分支, 且只在无候选分支可选时才执行
7. select语句的每次执行, 包括case表达式求值和分支选择, 都是独立的. 其执行是否并发安全, 需要看
   其中的case表达式以及分支中是否包含并发不安全的代码.

** 并发的退出
不要向channel发送值, 而是用关闭一个channel来进行广播. 此代码就是通过关闭done通道来实现通知的.
#+BEGIN_SRC go
package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"sync"
	"time"
)

// 并行计算目录的大小
var verbose = flag.Bool("v", false, "show verbose msg")

func main() {
	flag.Parse()

	var tick <-chan time.Time
	if *verbose {
		tick = time.Tick(time.Second * 2)
	}

	// 从标准输入流读取内容
	go func() {
		os.Stdin.Read(make([]byte, 1))
		close(done) // 关闭done通道, canclled会返回true
	}()

	roots := flag.Args()
	if len(roots) == 0 {
		roots = []string{"."}
	}

	fileSizes := make(chan int64)
	var n sync.WaitGroup

	for _, root := range roots {
		n.Add(1)
		go walkDir(root, &n, fileSizes)
	}

	go func() {
		n.Wait()
		close(fileSizes)
	}()

	var nfiles, nbytes int64
loop:
	for {
		select {
		case <-done:
			for range fileSizes {
			} // 清空fileSizes通道
			panic("just for see stack")
			return
		case size, ok := <-fileSizes:
			if !ok {
				break loop
			}
			nfiles++
			nbytes += size
		case <-tick:
			printDiskUsage(nfiles, nbytes)
		}
	}
	printDiskUsage(nfiles, nbytes)

}

func printDiskUsage(nfiles, nbytes int64) {
	fmt.Printf("%d files  %.1f MB\n", nfiles, float64(nbytes)/1e6)
}

func walkDir(dir string, n *sync.WaitGroup, fileSizes chan<- int64) {
	defer n.Done()
	if cancelled() {
		return
	}

	for _, entry := range dirents(dir) {
		if entry.IsDir() {
			n.Add(1)
			subdir := filepath.Join(dir, entry.Name())
			go walkDir(subdir, n, fileSizes)
		} else {
			fileSizes <- entry.Size()
		}
	}
}

// 限制goroutine的个数, 最多20个
var sema = make(chan int, 20)

func dirents(dir string) []os.FileInfo {
	select {
	case sema <- 1:
	case <-done:
		return nil
	}
	defer func() { <-sema }()

	// read direcotry的一种方法

	entries, err := ioutil.ReadDir(dir)
	if err != nil {
		return nil
	}

	// read direcotry的另一种方法
	/*
		f, err := os.Open(dir)
		if err != nil {
			fmt.Fprintf(os.Stderr, "du: %v\n", err)
			return nil
		}
		defer f.Close()

		entries, err := f.Readdir(0)
		if err != nil {
			fmt.Fprintf(os.Stderr, "du: %v\n", err)
		}
	*/
	return entries
}

// 退出goroutine
var done = make(chan int)

func cancelled() bool {
	select {
	case <-done:
		return true
	default:
		return false
	}
}
#+END_SRC

** 聊天程序
P335 # TODO:

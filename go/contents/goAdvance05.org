* sync.Pool - 临时对象池
** 基础
称为临时对象池, 其值可以被用来存储临时的对象. 是结构体类型.

临时对象的意思是: 不需要持久使用的某一类值, 这类值对于程序来说可有可无, 但如果有的话会明显更好.
其创建和销毁可以在任何时候发生, 并且完全不会影响到程序的功能. 同时他们也是无需被区分的, 其中的任何
一个值都可以代替另一个.
例如: 可以将临时对象池当做数据的缓存来使用.

Pool类型只有两个方法: Put和Get
Put用于在当前的池中存放临时对象, 接受一个interface{}类型的参数;
Get从池中获取临时对象, 返回一个interface{}类型的值. Get方法可能会从当前的池中删除掉任何一个值,
然后把这个值作为结果返回, 如果池中没有任何值, 该方法就会使用当前池的New字段创建一个新值并返回.

临时对象池中的值会被及时地清理掉, 原因是Go语言运行时系统中的垃圾回收器, 所以在每次开始执行前, 都会
对所有已创建的临时对象池中的值进行全面地清除.

** 进阶
sync包在被初始化时, 会向go语言运行时系统注册一个函数、该函数的功能就是清除所有已创建的临时对象池
中的值.
sync包中还有一个包级私有的全局变量, 该变量代表了当前的程序中使用的所有临时对象池的会中. 它是
元素类型为*sync.Pool的切片, 可以称为池汇总列表.

通常在一个临时对象池的Put或Get方法第一次被调用时, 该池就会被添加到池汇总列表中.


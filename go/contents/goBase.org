* Go的辅助工具包
go get golang.org/x/tools/cmd/goimports  # 根据需要自动添加或删除import声明

* Go 基础
** 源码文件分类
命令源码文件、库源码文件、测试源码文件

命令源码文件是程序的入口, 是每个可独立运行的程序必须拥有的. 如果一个源码文件声明属于main包,
并且包含一个无参数声明且无结果声明的main函数, 那么就是命令源码文件.

** 不需要添加分号
不需要在语句或声明的末尾添加分号, 除非一行上有多条语句. 编译器会主动把特定符号后的换行符转换为
分号, 因此换行符添加的位置会影响Go代码的正确解析.

例如: x + y, 可在+后换行, 不能在"+"前换行.

** ++, --
go中++和--是语句, 不是表达式, 因此不能用于赋值.

** for
for init; condition; post {
}

for的这三个部分都可以省略或省略部分. condition是一个布尔表达式, 其值在每次循环迭代开始时计算.

** printf格式
fmt.Printf的转换格式定义:
| %d         | 十进制整数                               |
| %x, %o, %b | 16, 8, 2进制整数                         |
| %f, %g, %e | 浮点数                                   |
| %t         | 布尔: true/false                         |
| %c         | 字符(rune)unicode码点                    |
| %s         | 字符串                                   |
| %q         | 带双引号的字符串"abc"或带单引号的字符'c' |
| %T         | 变量的类型                               |
| %%         | 输出百分号标志                           |
| %#         |                                          |
#+BEGIN_SRC go
// %[1]表示使用第一个操作数, 即10
// %#表示在使用%o, %x或%X时输出时生成0, 0x, 0X前缀
fmt.Printf("%d, %[1]o, %#[1]x\n", 10)

// 打印8个字符宽度, 小数点后3个字符宽度, 如果不足8个字符宽度, 会使用空格填充,
// 超过8个字符则不会截断
fmt.Printf("%8.3f\n", 1.334567)
fmt.Printf("%08b\n", 10)  // 不足8位时使用0补齐
#+END_SRC
** switch
go中的switch不需要显式的在每一个case后写break, 语言默认执行完case后的逻辑语句会自动退出.
如果在一个case语句下, 不想执行后面的内容, 则可以使用break语句.
#+BEGIN_SRC go
func main() {
	a := 1
	switch a {
	case 1:
		fmt.Println("case 1")
		if false {
			fmt.Println("no through")
			break
		}
		fallthrough
	case 2:
		fmt.Println("case 2")
	}

    // 另一种switch格式, 无tagswitch, 与switch true等价
	switch {
	case a == 1:
		fmt.Println("a == 1")
	}
}
#+END_SRC
如果想相邻的几个case都执行同一逻辑, 可以显示的加上fallthrough, 必须加在每个case的最后位置.

无tag switch, 等价于switch true, 例如:
#+BEGIN_SRC go
func SigNum(x int) int {
    switch {
        case x > 0:
            return +1
        case x < 0:
            return -1
    }
}
#+END_SRC

** break/continue
#+BEGIN_SRC go
func main() {
loop:
	for i := 0; i < 10; i++ {
		if i == 2 {
			continue loop  // 跳转到loop继续执行
            // break loop  // 跳转到loop后的代码继续执行
		}
		fmt.Println(i)
	}
	fmt.Println("Loop after")
}
#+END_SRC
** 指针
go可以是&返回一个变量的地址, *可以获取指针指向的变量内容, 但没有指针运算.

go中还有其他几样东西可以代表"指针", 最贴近传统意义的当属uintptr类型, 该类型实际上是一个数值类型
是go语言内建的数据类型之一, 根据当前计算机的计算架构的不同, 可以存储32或64位的无符号整数, 可以
代表任何指针的位模式, 即原始的内存地址.

** 变量
go会对每个未赋值的变量使用"零值"初始化, 这可以确保每个声明的变量总是有一个良好定义的值.
在包级别声明的变量会在main入口函数执行前完成初始化, 局部变量将在声明语句被执行到的时候完成初始化.

var i, j, k int
var b, f, s = true, 2.3, "four"

变量重声明其含义是对已经声明过的变量再次声明, 前提条件是:
1. 由于变量的类型在其初始化时就已经确定了, 所以对它再次声明时赋予的类型必须与其原本的类型相同,
   否则会产生编译错误.
2. 变量重声明只可能发生在同一个代码块中. 可以使用go vet -shadow 来显示变量覆盖的错误
3. 变量的重声明只有在使用短变量声明时才会发生, 否则无法通过编译
4. 被"声明并赋值"的变量必须是多个, 并且其中至少有一个是新的变量, 此时才可以说对其中的旧变量
   进行了重声明.

go中返回函数中局部变量的地址是安全的.

编译器会自动选择在栈上还是堆上分配局部变量的存储空间, 但这个选择并不是由var还是new
声明变量的方式决定的.

math.Nan()返回一个非数对应的值, 是float64类型的, 可以使用math.IsNaN来测试一个数是否是非数.
在浮点数中, NaN, 正无穷和负无穷都不是唯一的, 每个都有非常多的bit模式表示.

** new
new(T)将创建一个T类型的匿名变量, 初始化为T类型的零值, 然后返回变量地址, 返回的指针类型为*T.

如果两个类型都是空的, 即类型的大小是0, 如: struct{}和[ 0]int, 有可能有相同的地址(依赖具体的语言
实现, 并且也可能导致Go语言的自动垃圾回收器有不同的行为, 查看runtime.SetFinalizer相关信息).

** 类型
具有相同底层类型的类型是不同的数据类型, 不能相互比较或混在一个表达式运算中.
#+BEGIN_SRC go
type Celsius float64  // 摄氏温度
type Fahren float64  // 华氏温度

var t Celsius
Fahren(t)  // 类型转换, 不是函数调用
#+END_SRC
类型转换不会改变值本身, 但会使它们的语义发生变化. 对于每一个类型T, 都有一个类型转换操作T(x), 用于
将x转换为T类型, 如果T是指针类型可能会需要用小括号包装, 如(*int)0.

只有当两个类型的底层基础类型相同时才允许这种转型操作, 或者是两者都指向相同底层结构的指针类型.
将一个字符串转为[]byte类型的slice将拷贝一个字符串数据的副本.

任何情况下, 运行时不会发生转换失败的错误, 错误只会发生在编译阶段.

当整数值的类型的有效范围由宽变窄时, 需要在补码形式下截掉一定数量的高位二进制数
当把一个浮点数类型的值转换为整数类型值时, 会舍弃浮点数的小数部分

直接将一个整数值转换为一个string类型的值是可行的, 需要注意的是被转换的整数值可以代表一个有效的
Unicode码点, 否则转换的结果就是"�", 其码点是\U+FFFD, 是Unicode标准中定义的Replacement Character
专门用于替换那些未知的、不被认可的以及无法展示的字符.

一个值在从string类型向[]byte类型转换时代表着以UTF-8编码的字符串会被拆分成零散、独立的字节.
除了与ASCII编码兼容的那部分字符集, 以UTF-8编码的某个单一字节是无法代表一个字符的.
一个值在从string类型向[]rune类型转换时代表字符串会被拆分成一个个Unicode字符.

别名类型的声明如下: type MyString = string, 表示MyString是string类型的别名类型. 别名类型与其源
类型的区别只是在名称上不一样, 除此之外是完全相同的.
Go语言内建的基本类型就存在两个别名类型: byte是uint8的别名, rune是int32的别名类型

type Mystring2 string 这是对类型的再定义,MyString2的潜在类型是string, 潜在类型的含义是某个类型在
本质上是哪个类型或者是哪个类型的集合.
潜在类型相同的不同类型的值之间是可以进行类型转换的.
注意: []MyString2 与 []string的潜在你、类型分别是: MyString2和string, 因此不可以进行类型转换,
即使两个类型的潜在类型相同, 之间的值也不能进行判断或比较, 也不能赋值.

** 代码包
导入包的重命名只影响当前的源文件, 其他的源文件如果导入了相同的包, 可以使用默认的导入也可以重命名
为另一个名字.

代码包的基本规则:
1. 同目录下的源码文件的代码包声明语句要一致
   如果目录中有命令源码文件, 那么其他种类的源码文件也应该声明属于main包
2. 源码文件声明的代码包的名称可以与其所在目录名不同, 在针对代码包进行构建时, 生成的结果文件
   的主名称与其父目录的名称一致

如果包中含有多个.go源文件, 将按照发给编译器的顺序进行初始化, go构建工具会先将go文件根据文件
名排序, 然后依次调用编译器编译.

#+BEGIN_SRC go
var pc [256]byte = func() (pc [256]byte) {
    for i:= range pc {
        pc[i] = pc[i/2] + byte(i&1)
    }
    return
}()  // 直接定义值
#+END_SRC

包变量会被函数中的局部变量隐藏, 例如:
#+BEGIN_SRC go
var cwd string

func init() {
    cwd, err := os.Getwd()  // 此处不会使用全局的cwd, 可以使用go vet -shadow main.go检查
}
#+END_SRC

代码包的远程导入: [[https://github.com/hyper0x/go_command_tutorial/blob/master/0.3.md][web参考链接]]
对代码包的远程导入路径进行自定义的方法是: 在该代码包中的库源码文件的包声明语句的右边加入导入注释
如:
#+BEGIN_SRC go
package semaphore // import "golang.org/x/sync/semaphore"
#+END_SRC

[[https://github.com/hyper0x/go_command_tutorial/blob/master/0.3.md][自定义代码包导入路径说明-web链接]]

*** 思考题
1. 如果需要导入两个代码包, 这两个代码包的导入路径的最后一级是相同的, 会导致冲突吗?
   答: 分情况讨论
   例如:导入路径为"dep/lib/flag"和"dep/lib2/flag", 如果这两个路径中的包的命名不一样,
   则不会引发冲突, 即假设dep/lib/flag中的包名为flag1, dep/lib2/flag中的包名为flag2,
   在导入时其实go编译器已经将其区分开了, 对于dep/lib/flag中的包的调用需要时flag1.XX,
   dep/lib2/flag中包的调用需要使用flag2.XX

   如果这两个路径中的包的命名一样, 则就会引发冲突, 解决方法就是导入时使用别名,
   #+BEGIN_SRC go
import (
a "dep/lib/flag"
b "dep/lib2/flag"
)
   #+END_SRC

** range循环注意事项
1. range表达式只会在for语句开始执行时被求值一次, 无论后边会有多少次迭代
2. range表达式的求值结果会被复制, 即被迭代的对象是range表达式结果值的副本而不是原值
#+BEGIN_SRC go
func main() {
	numbers2 := [...]int{1, 2, 3, 4, 5, 6}
	maxIndex2 := len(numbers2) - 1
	for i, e := range numbers2 {
		if i == maxIndex2 {
			numbers2[0] += e
		} else {
			numbers2[i+1] += e
		}
	}
	fmt.Println(numbers2)  // 请思考输出的结果是什么?
}
#+END_SRC

** switch语句中的switch表达式和case表达式之间的联系
#+BEGIN_SRC go
func main() {
	value1 := [...]int8{0, 1, 2, 3, 4, 5, 6}
	switch 1 + 3 {
	case value1[0], value1[1]:
		fmt.Println("0 or 1")
	case value1[2], value1[3]:
		fmt.Println("2 or 3")
	case value1[4], value1[5], value1[6]:
		fmt.Println("4 or 5 or 6")
	}
}  // 这段代码能否通过编译, 答案是不可以
#+END_SRC
原因是: 1+3的求值结果是无类型的常量4, 该常量会自动被转换为此种常量的默认类型的值, 如整数4的
默认类型是int, 比如浮点数3.14的默认类型是float64.

#+BEGIN_SRC go
func main() {
	value1 := [...]int8{0, 1, 2, 3, 4, 5, 6}
	switch value1[4] {
	case 0, 1:
		fmt.Println("0 or 1")
	case 2, 3:
		fmt.Println("2 or 3")
	case 4, 5, 6:
		fmt.Println("4 or 5 or 6")
	}
}  // 能否通过编译, 原因是什么? 能
#+END_SRC
如果case表达式中子表达式的结果是无类型的常量, 它的类型会被自动地转换为switch表达式的结果类型,
又由于上述那几个整数都可以被转换为int8类型的值, 所以对这些表达式的结果值进行判断等操作是可以的.
如果此处的自动转换没有成功, switch语句照样通不过编译.

switch语句会进行有限的类型转换, 不能保证这种转换可以统一它们的类型, 并且如果这些表达式的结果类型
有某个接口类型, 那么一定要小心检查它们的动态值是否都具有可比性.

switch语句在case子句的选择上具有唯一性, 不允许case表达式中的子表达式结果值存在相等的情况, 不论
这些结果值是否存在于不同的case表达式中, 都会是这样的结果. 这个约束本身还有个约束,
就是只针对结果值为常量的子表达式. case子句的编写顺序也很重要, 最上边的case子句中的子表达式总是会
被最先求值. 例如：
#+BEGIN_SRC go
func main() {
	value1 := [...]int8{0, 1, 2, 3, 4, 5, 6}
	switch value1[4] {
	case value1[0], value1[1], value1[2]:
		fmt.Println("0 or 1")
	case value1[2], value1[3], value1[4]:
		fmt.Println("2 or 3")  // 执行此语句
	case value1[4], value1[5], value1[6]:
		fmt.Println("4 or 5 or 6")
	}
}
#+END_SRC

这种绕过方式对于类型判断的switch语句就无效了, 因为case表达式的子表达式, 都必须直接由类型字面量
表示, 而无法通过间接的方式表示. 如:
#+BEGIN_SRC go
value := interface{}(byte(127))
switch t := value.(type) {
    case uint8, uint16:
        fmt.Println("uint8 or uint16")
    case byte:  // 由于byte是uint8的别名类型, 等价于: case uint8, 重合了, 因此无法通过编译
        fmt.Printf("byte")
    default:
        fmt.Printf("unsupported type: %T\n", t)
}
#+END_SRC

** 内部包
go语言的构建工具对包含internal名字的路径段的包导入路径做了特殊处理, 这种包叫做internal包.

导入internal包的规则约束如下:
1. internal包的源码文件必须在以"internal"命名的文件夹下
2. 包名必须是 package internal
3. 如果导入代码本身不在以"internal"目录的父目录为root的目录树中, 那么不允许其导入路径中包含
   internal元素. 例如:
   #+BEGIN_SRC text
a/b/internal/x.go
a/b/c/x.go
a/b/d/x.go
a/c/f/x.go
a/b/x.go
以上目录结构中, 目录"c", "d"与"internal"目录同级, 因此在"c", "d"中可以导入internal包,
目录f不能导入internal包, a/b/x.go也可以导入internal包.
   #+END_SRC
   a/b/c/internal/d/e/f 只可以被以a/b/c为根目录树下的代码导入, 不能被a/b/g下的代码导入.
   总结: 只有与internal目录同级或internal同级目录的子目录才能导入

** 代码包的一些命令
go list std | wc -l  # 查看标准包的具体数目

go语言编译速度快的原因有:
1. 所有导入包必须在每个文件的开头显式声明, 这样编译器就没有必要读取和分析整个源文件来判断包
   的依赖关系.
2. 禁止包的环状依赖, 因此包的依赖关系就是一个有向无环图, 每个包可以被独立编译, 且可以并发编译
3. 编译后包的目标文件不仅仅记录包本身的导出信息, 目标文件同时还记录了包的依赖关系. 在编译一个包
   的时候只需要读取每个直接导入包的目标文件, 而不需要遍历所有依赖的文件.

** unicode字符
unicode字符是rune类型, 是和int32等价的类型, 用于表示一个unicode码点.
UTF8使用1~4个字节来表示每个Unicode码点, 每个符号编码后第一个字节的高端bit位用于表示
总共有多少个编码字节, 如果第一个字节的高端bit为0, 则表示对于7bit的ASCII字符. 如果第一个字节的高端
bit是110, 则说明需要两个字节, 后续的每个高端bit都以10开头, 如下:
| 0xxxxxxx                            |    runes 0-127 | ASCII                |
| 110xxxxx 10xxxxxx                   |       128-2047 | values < 128 unused  |
| 1110xxxx 10xxxxxx 10xxxxxx          |     2048-65535 | values < 2048 unused |
| 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx | 65535-0x10ffff | other values unused  |

UTF8编码是一个前缀编码, 与Unicode的码点顺序一致, 可以直接排序UTF8编码序列. 应为没有嵌入的NUL(0)
字节, 可以很好的兼容那些使用NUL作为字符串结尾的编程语言.

#+BEGIN_SRC go 操作Unicode
s := "Hello, 世界"
b := []byte(s)  // 转换为字节slice
fmt.Println(utf8.RuneCountInString(s))

for i:=0; i<len(s); {
    r, size := utf8.DecodeRuneInString(s[i:])  // r表示rune字符本身, size表示该字符占用的字节数
    fmt.Printf("%d\t%c\n", i, r)
    i += size
}

for i, r := range s {
    fmt.Println(i, r)
}
#+END_SRC
如果遇到一个错误的UTF8编码输入, 将生成一个特别的unicode字符"\uFFFD".
将一个整数转型为字符串意思是生成以只包含对应Unicode码点字符的UTF8字符串.

** 操作符
取模运算符仅用于整数, 其符合与被取模运算符的符号一致.

&^: 位清空(AND NOT).
z = x &^ y: 如果y中对应的bit位为1, 则z中的对应为为0, 其他情况保持不变.

** 内置len函数返回有符号数的一种合理解释
例如:
#+BEGIN_SRC go
medals := []string{"gold", "silver"}
for i := len(medals) - 1; i >= 0; i-- {
    fmt.Println(medals[i])
}
#+END_SRC
如果len返回一个无符号数, 则i >= 0会永远成立, 这样就会超出数组的访问范围从而引发panic.

** 字符串
len返回字符串的字节数目, 不是rune字符数目.
字符串操作s[i:j]基于原始的s字符串生成一个新字符串.
#+BEGIN_SRC go 想法验证
s := "I Love Candice"
a := s[1:2]
b := s[1:2]
#+END_SRC

** 常量
常量可以是构成类型的一部分, 如指定数组类型的长度.
const (
    a = 1
    b  // b = 1
    c = 2
)

** iota常量生成器
在第一个声明的常量所在行, iota会被初始化为0.
const (
    _ = 1 << (10 * iota)
    Kib  // 1024
    Mib  // 1048576
    Gib
    Tib  // (exceeds 1 << 32), 超过了 1 << 32
    Pib
    Eib
    Zib  // 此时直接输出会报错
    Yib
)

fmt.Println(Zib)  // 编译错误, 溢出
fmt.Println(Yib/Zib)  // 正常输出

** 无类型常量
go中许多常量并没有一个明确的基础类型, 编译器为这些没有明确的基础类型的数字常量提供比基础类型更
高精度的算术运算, 可以认为至少有256bit的运算精度.

除法运算符会根据操作数的类型生成对应类型的结果, 因此不同写法的常量除法表达式可能对应不同的结果.
var f float64 = 212
fmt.Printf("%T\n", (f-32)*5/9)  // 100, (f-32)*5 is float64
fmt.Printf("%T\n", 5/9*(f-32))  // 0, 5/9 is an untyped integer = 0
fmt.Printf("%T\n", 5.0/9.0*(f-32))  // 5.0/9.0 is an untyped float

** 数组
数组类型的长度是固定的, 数组的长度是其类型的一部分.
数组属于值类型, 同属于值类型有基础数据类型和结构体类型.

r := [...]int{99:-1}  // 前99个元素的值是默认的0, 第100个元素的值为-1.

如果一个数组的元素类型是可以相互比较的, 那么数组类型也是可以相互比较的.
#+BEGIN_SRC go
a := [...]int{1, 2}
b := [2]int{1, 2}
fmt.Println(a==b)
#+END_SRC

** slice
切片类型的长度是可变长. 属于引用类型, 同属引用类型的还有字典类型、通道类型、函数类型等.
切片的底层数组其长度是不可变的.
如果切片操作超出cap(s)的上限将导致一个panic异常, 超出len(s)则意味着扩展了slice.
切片操作对于字符串则生成一个新字符串, 如果x是[]byte的话, 则生成一个新的[]byte.
#+BEGIN_SRC go
data := [...]byte{1, 2, 3, 4}
a := data[1:3]
b := data[1:3]
a[0] = 10
fmt.Println(a, b)  // 此处输出证明a, b还是共享同一个底层数据 #TODO

s := []int{10:10}  // slice也可以按顺序指定初始化值序列,或通过索引和元素值指定
#+END_SRC
一个切片的长度是其底层数组的长度减去切片表达式中的起始索引值.

slice之间不能进行比较, 即不能使用==来比较两个slice是否含有全部相等元素. 唯一合法比较是与nil比较
标准库提供了bytes.Equal函数来判断两个字节型slice是否相等.

一个零值的slice等于nil, 一个nil值的slice没有底层数组, 但也有非nil值的slice的长度和容量是0的,
如: []int{}或make([]int, 3)[3:], 可以使用[]int(nil)类型转换来生成一个对应类型slice的nil值.

测试一个slice是否为空, 应该使用len(s) == 0来判断, 而不应该是s == nil.

** map
go中的map是一个哈希表(hash table)的特定实现. 键的类型是受限的, 元素可以是任意类型.
此限制的原因是: 哈希表有一个最重要的过程=>映射, 可以将键理解为元素的一个索引.
键类型的值必须要支持判断等操作, 即必须支持==和!=.

试图在一个值为nil的字典中添加键-元素对的时候, 会报panic
#+BEGIN_SRC go
type People struct {
    Name string
    Age int
}
func main() {
    m := map[interface{}]interface{}{
        "name": "casper",
        "age": 18,
        "salary": []int{10000, 200000},
        [2]string{"a", "b"}: 2,  // OK
        People{"casper", 18}: 3,  // OK
        []int{2}: 1,  // 此处会引发panic, 因为slice不能使用==和!=
    }
}
// 注意: 结构体, 数组也可以作为键, 如果是数组类型那么还要确保该类型的元素类型不是函数类型、
// 字典类型或切片类型. 如果是结构体类型, 还要保证其中字段的类型的合法性.
#+END_SRC
不能对map的元素进行取地址操作. map的迭代顺序是随机的.
map之间也不能进行相等比较, 但可以和nil进行比较.

可以用map实现类似set的功能.
#+BEGIN_SRC go 字典的字典
var graph = make(map[string]map[string]bool)
func addEdge(from, to string) {
    edges := graph[from]
    if edges == nil {
        deges = make(map[string]bool)
        graph[from] = edges
    }
    edges[to] = true
}
#+END_SRC

** 结构体
go中"."操作的对象可以是结构体对象也可以是结构体的指针对象.
#+BEGIN_SRC go
type Employee struct {
    ID int
    Name string
}

func EmployeeByID() *Employee {
    return &Employee{}
}

func main() {
    EmployeeByID().ID = 1  // 如果该函数不是返回的指针, 则会报错
}
#+END_SRC
改为返回Employee值类型后, 调用函数返回的是值, 并不是一个可取地址的变量.

相邻的成员类型如果相同可以合并到一行书写.
结构体成员的输入顺序也有重要意义. 一个结构体可以同时包含导出和未导出的成员.

一个命名为S的结构体不能再包含S类型的成员, 但可以包含*S指针类型成员.

如果结构体的全部成员都是可以比较的, 那么结构体也是可以比较的.

struct{}类型值的表示法只有一个, 即struct{}{}, 且它占用的内存空间是0字节. 确切的说, 这个值在整个
Go程序中永远只存在一份, 可以无数次的使用这个值字面量, 但用到的却都是一个值.

当仅仅把通道当作传递某种简单信号的介质的时候, 用struct{}作为其元素类型是再好不过的.

** 结构体嵌入和匿名成员
匿名成员: 在一个结构体内部可以声明一个成员对应的数据类型而不指名成员的名字.
只要方法名称相同, 无论方法的签名是否一致, 被嵌入类型的方法都会"屏蔽"掉嵌入字段的同名方法.

如果存在同名的字段, 也会有"屏蔽"现象.
如果处于同一个层级的多个嵌入字段拥有同名的字段或方法, 那么从被嵌入类型的值那里选择此名称就会
引发一个编译错误, 因为编译器无法确定被选择的成员到底是哪一个.

#+BEGIN_SRC go
type Point struct {
    x, y int
}

type Circle struct {
    Point
    Radius int
}

var c Circle
c.x = 1  // 直接访问匿名成员的变量
c.Point.x = 1 // 也可以访问

cc := Circle{Point{1, 2}, 3}
#+END_SRC

外层结构体不仅仅获得了匿名成员类型的所有成员, 而且也获得了该类型导出的全部方法.
在类型中内嵌匿名字段也可以是一个命名类型的指针, 此时字段和方法会被间接地引入到当前的类型中.

通过嵌入字段的方式实现了类型之间的组合, 不是继承. go中没有继承的概念.

** 值方法和指针方法的区别
值方法就是接收者类型是非指针的自定义数据类型的方法.

一个自定义数据类型的方法集合中仅会包含它的所有值方法, 而该类型的指针类型的方法集合却包含了所有
值方法和所有指针方法.

一个类型的方法集合中有哪些方法与它能实现哪些接口类型是息息相关的, 如果一个基本类型和它的指针类型
的方法集合是不同的, 那么它们具体实现的接口类型的数量也会有差异. 例如:
#+BEGIN_SRC go
type People struct {
	Name string
	Age  int
}

type IPeople interface {
	SetName(name string)
	GetName() string
}

func (p *People) SetName(name string) {
	p.Name = name
}

func (p People) GetName() string {
	return p.Name
}

func main() {
	p := People{"capser", 18}
	_, ok := interface{}(p).(IPeople)
	fmt.Printf("p is instance of IPeople: %t\n", ok)  // false, p没有实现SetName方法

	_, ok = interface{}(&p).(IPeople)
	fmt.Printf("*p is instance of IPeople: %t\n", ok)  // true, *p实现了SetName方法
}
#+END_SRC

** 接口类型
接口类型是没法被值化的, 即没法被实例化. 即不能通过new或make创建出一个接口类型的值, 也无法用字面量
来表示一个接口类型的值.
对于某一个接口类型来说, 如果没有任何数据类型可以作为它的实现, 那么该接口的值就不可能存在.

对于一个接口类型的变量来说, 赋给它的值可以被叫做它的实际值(也叫动态值),
而该值的类型可以被叫做这个变量的实际类型(动态类型).

如果只有一个*Dog类型是Pet接口的实现, 将其赋值给Pet的变量pet后, pet的动态类型就是*Dog, 此时如果
*Fish也是Pet接口的实现, 将其赋值给pet后, pet的动态类型就是*Fish.
在给一个接口类型的变量赋予实际值之前, 它的动态类型是不存在的.

当给一个接口变量赋值时, 该变量的动态类型会与它的动态值一起被存储在一个专用的数据结构中, go语言
的runtime包中将该数据结构叫做iface.
iface会包含两个指针, 一个指向类型信息的指针, 一个指向动态值的指针. 此处的类型信息由另一个专用
数据结构的示例承载的, 其中包含动态值的类型以及使它实现了接口的方法和调用它们的途径.

如果使用一个变量给另外一个变量赋值, 那么真正赋给后者的并不是前者持有的那个值, 而是该值的一个副本.
#+BEGIN_SRC go
type People struct{ Name string }
type IPeople interface {
	GetName() string
	SetName(name string)
}

func (p People) GetName() string      { return p.Name }
func (p *People) SetName(name string) { p.Name = name }

func main() {
	var p IPeople
	var people People
	p = &people

	p.SetName("casper")
	fmt.Println(p.GetName())
}
// 可以正常运行

func main() {
    var p IPeople
    var people *People

    p = people
    p.GetName() // panic
    p.SetName("casper")  // panic
}
#+END_SRC

** 函数
go中函数是一等公民, 函数类型也是一等数据类型. 函数可用于封装代码、切割功能、解耦逻辑、还可以
成为普通的值, 在其他函数间传递、赋予变量、做类型判断和转换等, 即函数值可以成为呢过个被随意传播
的独立逻辑组件或者是功能模块.
type Printer func(content string) (in, error)  # 声明一个叫做Printer的函数类型

函数的类型被称为函数的标识符, go语言没有默认参数值, 也不能通过参数名指定形参.
函数类型是引用类型, 其值可以为nil.

go中所有的函数参数都是值拷贝传入的, 函数参数将不再是函数调用时的原始变量.
go使用可变栈, 栈的大小按需要增加(初始时很小), 这使得使用递归时不必考虑溢出和安全问题.
#+BEGIN_SRC go
func add1(r rune) rune { return r + 1 }
strings.Map(add1, "HAL")
#+END_SRC

** 高阶函数
可以满足的条件:
1. 接受其他的函数作为参数传入
2. 把其他的函数作为结果返回
只要满足了其中任意一个特点, 就可以说这个函数是一个高阶函数.

** 闭包
也叫自由变量, 在一个函数中存在对外来标识符的引用, 外来标识符不代表当前函数的任何参数或结果,
也不是函数内部声明的, 是直接从外边拿过来的.

** 错误处理
var Err = errors.New("Error")

** 捕获迭代变量
#+BEGIN_SRC go
var rmdirs []func()

for _, d := range tempdirs() {
    os.MkdirAll(dir, 0755)
    rmdirs = append(rmdirs, func(){ os.RemoveAll(d)})
}

for _, rmdir := range rmdirs {
    rmdir()
}
#+END_SRC
以上代码是错误的, 原因是for循环语句引入了新的词法块, 循环变量d在这个词法块中被声明, 在该循环中
生成的所有函数值都共享相同的循环变量, 需要注意的是: 函数值中记录的是循环变量的内存地址, 而不是
循环变量某一时刻的值, 每一次迭代都会更新d的值, 当删除操作执行时, for循环已经完成, d中存储的值
等于最后一次迭代的值, 因此每次对os.RemoveAll的调用删除都是相同的目录. 修改版:
#+BEGIN_SRC go
for _, d := range tempdirs() {
    dir := d
    rmdirs = append(rmdirs, func(){ os.RemoveAll(dir)})
}
#+END_SRC

可变参数: 在参数列表的最后一个参数类型之前加上省略号"...", 这表示该函数会接受任意数量的该类型参数
#+BEGIN_SRC go
func sum(vals... int) int {
    total := 0
    for _, val := range vals {
        total += val
    }
    return total
}
#+END_SRC

** defer
derfer的执行顺序与声明顺序相反.
处理其他资源时, 可以采用defer机制.
在调试复杂程序时, defer机制也常被用于记录何时进入和退出函数, 例如:
#+BEGIN_SRC go
package main
import (
	"log"
	"time"
)

func bigSlowOperation() {
	defer trace("bigSlowOperation")() // don't forget the extra parentheses
	// ...lots of work...
	time.Sleep(10 * time.Second) // simulate slow operation by sleeping
}

func trace(msg string) func() {
	start := time.Now()
	log.Printf("enter %s", msg)
	return func() { log.Printf("exit %s (%s)", msg, time.Since(start)) }
}

func main() {
	bigSlowOperation()
}
#+END_SRC
注意不要忘记defer语句后的圆括号, 否则本该在进入时执行的操作会在退出时执行, 而本该在退出时执行的
永远不会被执行.

defer语句中的函数会在return语句更新返回值变量后再执行, 又因为在函数中定义的匿名函数可以访问该
函数包括返回值变量在内的所有变量, 所以对你们函数采用defer机制可以观察函数的返回值.
#+BEGIN_SRC go
func double(x int) (result int) {
    defer func() {fmt.Printf("double(%d) = %d\n", x, result)}()
    return x * x
}

func triple(x int) (result int) {
    defer func(){result += x}()  // 通过defer修改最终的reuslt值
    return double(x)
}
#+END_SRC

循环体中的defer语句需要特别注意, 因为只有函数在执行完毕后, 延迟函数才会执行, 下面的代码会导致
系统的文件描述符耗尽, 因为在所有文件都被处理之前, 没有文件会被关闭.
#+BEGIN_SRC go
for _, fname := range filenames {
    f, err := os.Open(fname)
    if err != nil { return err }
    defer f.Close()
}

// 解决方法之一是将循环体中的defer语句移至另外一个函数, 
for _, fname := range filenames {
    if err := doFile(fname); err != nil { return err }
}

func doFile(f string) error {
    f, err := os.Open(f)
    if err != nil { return err }
    defer f.Close()
}
#+END_SRC

在处理文件关闭时, 许多文件系统尤其是NFS, 写入文件时发生的错误会被延迟到文件关闭时反馈.
如果没有检查文件关闭时的反馈信息,可能会导致数据丢失,因此最好不要使用defer机制来关闭某些文件操作.

** panic与recover
#+BEGIN_SRC go
func parse(input string) (s *Syntax, err error) {
    defer func() {
        if p:=recover(); p != nil {
            err = fmt.Errorf("%v", p)
        }
    }
}
#+END_SRC
不加区分的恢复所有的panic异常是不可取的做法, 因为在panic之后, 无法保证包级变量的状态仍然和我们
预期一致. 并且不应该试图去恢复其他包引起的panic, 公有的API应该讲函数的运行失败作为error返回,
而不是panic.

根据panic的类型来选择性的恢复:
#+BEGIN_SRC go
func soleTitle(doc *html.Node) (title string, err error) {
    type bailout struct{}
    defer func() {
        switch p := recover(); p {
            case nil: // no panic
            case bailout{}: //do something
            default: panic(p)
        }
    }()

    panic(bailout{})
}
#+END_SRC
** 从panic被引发到程序终止运行时的大致过程
大致过程: 某个函数中的某行代码有意或无意地引发一个panic, 这时初始的panic详情会被建立起来, 并且该
程序的控制权会立即从此行代码转移至调用其所属函数的那行代码上, 即调用栈中的上一级. 即此行代码所属
函数的执行就随即终止, 紧接着控制权并不会在此停留, 又会立即转移至再上一级的调用代码处, 控制权如此
一级一级地沿着调用栈的反方向传播至顶端, 即最外层函数那里.

此处最外层函数指的是go函数, 对于主goroutine来说就是main函数, 但控制权也不会停留在那里, 而是被go
语言运行时系统回收. 随后程序崩溃并终止运行, 承载程序这次运行的进程也会随之死亡并消失, 与此同时,
在这个控制权传播的过程中, panic详情会被逐渐地积累和完善, 并会在程序终止之前被打印出来.

** JSON
json使用\Uhhhh转义数字来表示一个UTF-16编码.
将go语言中的数据转换为JSON的过程叫做编组(marshaling), 通过json.Marshal函数完成.
#+BEGIN_SRC go
type Movie struct {
    Title string
    Year int `json:"released"`
}

var movies = []Movie{
    {Title: "C", Year: 1942},
}
data, err := json.Marshal(movies)
// 每一行的输出前缀和每一个层级的缩进
data, err := json.MarshalIndent(movies, "", " ")

var titles []struct{Title string}
if err := json.Unmarshal(data, &titles); err != nil {
    log.Fatalf("Json unmarshal failed: %s", err)
}
// 获取从http请求来的数据并解析
json.NewDecoder(resp.Body).Decode(&titles)
#+END_SRC

** 错误处理
构建错误体系的基本方式有两种即, 创建立体的错误类型体系和创建扁平的错误值列表.

*** 错误类型体系
go内建的错误接口类型为error.
#+BEGIN_SRC go
package builtin
type error interface {
    Error() string
}
#+END_SRC
由于go语言中实现接口是非侵入式的, 因此可以做的非常的灵活. 例如: 标准库的net代码包中, 有个Error
接口类型, 是error接口的一个扩展接口, 因为error是net.Error的嵌入接口.
net包中有很多错误类型都实现了net.Error接口.

可以将这些错误类型想象成一颗树, 内建接口error是树根, net.Error接口就是一个在根上延伸的第一级
非叶子节点.

可以将这看做是一种多层分类的手段, 当net包的使用者拿到一个错误值的时候, 可以先判断它是否是
net.Error类型的, 如果是可以再进一步判断它的类型是哪一个更具体的错误类型.

net包中的这些具体错误类型都有一个名为Err类型为error接口类型的字段, 代表的是当前错误的潜在错误.
这些错误类型的值之间还可以有另外一种关系, 链式关系, 例如使用者调用net.DialTCP之类的函数时, net
包中的代码可能会返回一个*net.OpError类型的错误值, 以表示由于操作不当造成了一个错误, 同时这些代码
还可能会把一个*net.AddrError或net.UnknowNetworkError类型的值赋给该错误值的Err字段, 以表明导致这个
错误的潜在原因. 如果此处的潜在错误值的Err字段也有非nil的值, 那么将会执行更深层次的错误原因, 如此
一级又一级就像链条一样最终会指向问题的根源.

用类型建立起树形结构的错误体系, 用统一字段建立起可追溯的链式错误关联. 这是go语言标准库给予的优秀
范本, 有借鉴意义.
如果不想让包外的代码改动返回的错误值, 一定要小写其中字段的名称首字母. 可以通过暴露某些方法让包外
有进一步获取错误信息的权限.

*** 扁平化
error是接口类型, 通过errors.New函数生成的错误值只能被赋给变量, 由于这些代表错误的变量需要给包外
代码使用, 所以其访问权限是公开的.
此时有两种解决方案: 1是先私有化此类变量, 然后编写公开的用于获取错误值以及用于判断错误值的函数.
2, 参考syscall包. 该包有个类型叫做Errno, 代表了系统调用时可能发生的底层错误. 这个错误类型是error
的实现类型, 也是对内建类型uintptr的再定义类型.

由于uintptr可以作为常量的类型, 所以syscall.Errno也可以, 每个常量都对应一种系统调用错误. 包外代码
可以拿到这些代表错误的常量, 却无法改变它们.

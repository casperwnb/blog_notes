* flag包
** 介绍
用于接收和解析命令参数.
指针是实现该标准库的关键技术, 使用命令行参数来设置对应变量的值.

** 使用
#+BEGIN_SRC go
func HandleCmd() {
    var name string
    // 第一个参数用于存储该命令参数的值的地址, 此处就是name的地址了
    // 第二个参数是指定了该命令参数的名称
    // 第三个参数指定了未追加该命令参数时的默认值
    // 第四个参数,该命令参数的简短说明
    // 还有与该函数类似的函数: flag.String, 该函数会直接返回一个已经分配好的用于存储命令参数值的
    // 地址, 使用方法是: var name = flag.String("name", "defaultName", "Help Msg")
    // fmt.Println(*name) // 使用*name来访问值
    flag.StringVar(&name, "name", "defaultName", "Help Message")
    // 解析命令行参数, 并把它们的值赋给相应的变量. 对该函数的调用必须在所有命令参数存储载体的声明
    // (此处是对变量name的声明)和设置(这里是flag.StringVar函数的调用)之后, 并且在读取任何命令参数
    // 值之前进行.
    flag.Parse()
    fmt.Println(name)  // 输出解析的值
}

// 运行: go run xxx.go -name casper
// 或者: go run xxx.go --name casper
// go run xxx.go --help  # 查看帮助信息
#+END_SRC

** 定义命令源码文件的参数使用说明
有很多方式, 最简单的一种方式就是对变量flag.Usage重新赋值. flag.Usage的类型是func(), 是一种无参数
且无结果声明的函数类型.

flag.Usage变量在声明时就已经被赋值了, 所以才能够在运行命令go run xx.go --help时看到正确的结果

对flag.Usage的赋值必须在调用flag.Parse函数之前.

#+BEGIN_SRC go 修改flag.Usage
flag.Usage = func() {
    fmt.Fprintf(os.Stderr, "Usage of %s:\n", "question")
    flag.PrintDefaults()
}
flag.Parse()
#+END_SRC

** 深入
在调用flag包中的一些函数的时候, 实际上是在调用flag.CommandLine变量的对应方法.
flag.CommandLine相当于默认情况下的命令参数容器, 所以通过对flag.CommandLine重新赋值, 可以更深
层次地制定当前命令源码文件的参数使用说明.

#+BEGIN_SRC go
func init() {
    // 第二个参数的类型是: falg.NewFlagSet, 其取值有flag.PanicOnError, flag.ExitOnError
    // 这些值都预先定义在flag包中, 
    flag.CommandLine = flag.NewFlagSet("", flag.ExitOnError)
    flag.CommandLine.Usage = func() {
        fmt.Fprintf(os.Stderr, "Usage Of %s:\n", "Question")
        flag.PrintDefaults()
    }
}
#+END_SRC

不用全局的flag.CommandLine变量, 而是创建一个私有的命令参数容器. 这样可以定制自己的参数处理方法
#+BEGIN_SRC go

import (
	"flag"
	"fmt"
	"os"
)

var cmdLine = flag.NewFlagSet("question", flag.ExitOnError)

func main() {
	var name string
	cmdLine.StringVar(&name, "name", "casper", "greeting name")

	cmdLine.Parse(os.Args[1:])
	fmt.Println(name)
}
#+END_SRC

flag.Args()会存放无法解析的参数.
#+BEGIN_SRC go
for _, v := range flag.Args() {
}
#+END_SRC

读取自定义的数据
#+BEGIN_SRC go
type Student struct {
	name string
	sex  string
}

func (s *Student) Set(value string) error {
	valueLst := strings.Split(value, " ")
	s.name = valueLst[0]
	s.sex = valueLst[1]

	return nil
}

var s Student

flag.Var(&s, "student", "Help Msg")
#+END_SRC
** 一个问题
#+BEGIN_SRC go
func main() {
	var name = getTag()
    var age = getTag2()
	flag.Parse()
	fmt.Println(name, *age)
}

func getTag() string {
	return *flag.String("name", "defaultName", "Help Doc")
}

func getTag2() *string {
    return flag.String("age", "defaultName", "Help Doc")
}

// 运行go run main.go -name casper -age 100
// 输出结果是: name为默认值, age的值正常
// 原因:
/*
因为没有fmt.Parse()之前，flag.String("name", "everyone", "The greeting object.")的结果是
"everyone"的指针，也就是默认值。一旦fmt.Parse()执行了，这个指针指向的字符串就变成了你给定
的参数值了. 这里是指针会指向另一个字符串了，不再是"everyone"了。
如果直接传字符串值回去，那么也就没办法改变它了.
parse是参数的解析，然后去改变量值的指针指向的那个值
*/
#+END_SRC
* os
** os.Args
os包以跨平台的方式, 提供了一些与操作系统交互的函数和变量.
os.Args保存了变量, 是一个字符串的切片.
os.Args[ 0]保存的是命令本身的名字, 其他元素则是程序启动时传给它的参数.

#+BEGIN_SRC go
for _, args := range os.Args {
}

// 或者
import ("strings")
strings.Join(os.Args, " ")  // 使用空格连接字符串, Join的效率比使用"+"的效率更高
#+END_SRC

** os.Exit
用于退出程序

** os的用法
os.Getpid()  // 获取当前进程的PID
os.Getppid()  // 获取当前进程父进程的PID

** 管道
#+BEGIN_SRC go
// reader是管道的输出端, writer是管道的输入端
reader, writer, err := os.Pipe()

// 向管道写入数据
n, err := writer.Write("Hello")

output := make([]byte, 10)
n, err := reader.Read(output)
#+END_SRC
注意: 如果它们是并发运行的, 那么在reader之上调用Read方法就可以按顺序获取到之前通过调用writer
的Writer方法写入的数据. 为什么是并发运行?
因为命名管道默认会在其中一端还未就绪时阻塞另一端的进程.

#+BEGIN_SRC go  命名管道的正确用法
// 注意: 不能调用reader的写方法, 或writer的读方法.
reader, writer, err := os.Pipe()

go func() {
    output := make([]byte, 100)
    n, err := reader.Read(output)
}()

input := make([]byte, 26)
for i := 65; i <= 99; i++ {
    input[i-65] = byte(i)
}
n, err := writer.Write(input)
time.Sleep(200 * time.Millisecond)
#+END_SRC

os.Pipe()生成的管道是由底层系统级别的管道来支持的, 所以使用它们的要注意限制. 如:
匿名管道会在管道缓冲区写满之后使写数据的进程阻塞, 以及命名管道会在其中一端未就绪前阻塞另一端
进程.

* bufio包
用来处理输入和输出, Scanner类是该包最有用的特性之一, 读取输入并将其拆成行或单词.
#+BEGIN_SRC go
input := bufio.NewScanner(os.Stdin)
for input.Scan() {  // 调用一次Scan就读入下一行数据, 并移除行末的换行符, 有数据是返回true
    fmt.Println(input.Text())  // 读取的内容可以调用input.Text()获取
}

// 从文件中读取数据
func ReadMyFile(f *os.File) {
	input := bufio.NewScanner(f)
	for input.Scan() {
		fmt.Println(input.Text())
	}
}
func main() {
    f, _ := os.Open("filepath")
    ReadMyFile(f)
}

// 读取unicode字符
in := bufio.NewReader(os.Stdin)
for {
    r, n, err := in.ReadRune()  // return rune, nbytes, error
    if err == io.EOF {
        break
    }

    if r == unicode.ReplacementChar && n == 1 {
        // 如果输入的是无效的UTF-8编码的字符, 返回就是unicode.ReplacementChar表示无效字符
    }
}

in := bufio.NewReader(os.Stdin)
input, err := in.ReadString('\n')  // 以\n为分隔符读取一段内容, 会包含最后的一个\n
#+END_SRC
* io/ioutil
该包中的ReadFile将指定文件的内容全部读入内存中, 该函数返回一个字节切片, 必须将其转换为string才能
当做字符串来操作.
#+BEGIN_SRC go
import ("io/ioutil")
data, err := ioutil.ReadFile("filepath")
#+END_SRC

* io包
io包提供了一个基于内存的有原子操作保证的管道.
reader, writer := io.Pipe()
在使用Close关闭管道的某一端之后, 另一端在写数据或读数据时会得到一个预定义的error值
可以通过调用CloseWithError来定义这种情况下得到的error类型值.

* net/http包
** http.Get
创建HTTP请求, 如果获取url数据成功, 会在resp这个结构体中得到访问的请求结果.
resp的Body字段包括一个可读的服务器响应流.
#+BEGIN_SRC go
resp, err := http.Get(url)
b, err := ioutil.ReadAll(resp.Body)
nBytes, err := io.Copy(ioutil.Discard, resp.Body)  // 计算获取的字节数
resp.Body.Close()
#+END_SRC
* container/list包
** 简介
该包包含了两个公开的程序实体, List和Element. List是一个双向链表, Element代表了链表中元素的结构

** 使用
常用方法:
Front, Back, InsertBefore, InsertAfter, PushFront, PushBack, Next, New, Remove
#+BEGIN_SRC go
// var l list.List  // 声明的变量l是一个"零值", 该零值是一个长度为0的链表, 链表的根元素是一个空壳
// 其中会包含缺省的内容, 这个链表可以直接拿来使用, 这被称为开箱即用.
// go标准库中的很多结构体类型都做到了开箱即用.

import (
	"container/list"
	"fmt"
	"strconv"
)
type Student struct {
	Age  int
	Name string
}

func main() {
	var l list.List  // 等价于: l := list.New()
	for i := 0; i < 5; i++ {
		s := Student{i, "Casper" + strconv.Itoa(i)}
		l.PushBack(s)
	}

	for e := l.Front(); e != nil; e = e.Next() {
		v, ok := e.Value.(Student)  // 断言
		if !ok {
			fmt.Println("e.Value not Student Type")
			return
		}
		fmt.Println(v.Age, v.Name)
	}

    var n *list.Element
    // 删除链表中的元素
	for e := l.Front(); e != nil; e = n {
		n = e.Next()
		l.Remove(e)
	}

    l2 := list.New()
    l2.PushBack(1)
    l2.PushBack("Casper")  // 可以插入不同的类型
}

#+END_SRC
* container/ring包
** 介绍
Ring类型实现的是一个循环链表, 其实List在内部就是一个循环链表, 它的根元素永远不会持有任何实际的
元素值, 而该元素的存在, 就是为了连接这个循环链表的首尾两端.

Ring和List的不同如下:
1. Ring类型的数据结构仅由它自身即可代表, List类型需要由它以及Element类型联合表示.
2. 一个Ring类型的值严格来讲只代表了其所属的循环链表中的一个元素, 而一个List类型的值
   则代表了一个完整的链表
3. 在创建并初始化一个Ring值的时候, 可以它包含的元素的数量, List却不能这么做也没必要这么做
   循环链表一旦创建, 其长度就是固定的
4. 通过var r ring.Ring声明的r将会是一个长度为1的循环链表, var l list.List是一个长度为0的链表.
5. Ring的Len方法的算法复杂度是O(N), List的Len的复杂度是O(1)

** 使用
#+BEGIN_SRC go
func main() {
	var rlen = 5
	r1 := ring.New(rlen)
    // 只初始化4个元素的值
	for i := 0; i < rlen-1; i++ {
		r1.Value = i
		r1 = r1.Next()
	}

	printRing := func(v interface{}) {
		fmt.Print(v, " ")
	}
	// Do方法, 对Ring中的每个元素执行传入的函数
	//r1.Do(printRing)  // <nil> 0 1 2 3

	// Move方法循环移动元素的个数
	r2 := r1.Move(3) // r2: 2 3 <nil> 0 1

	// 修改第三个元素的值, 索引从0开始, r1的值还是<nil> 0 1 2 3
	r1.Move(2).Value = r1.Move(2).Value.(int) * 2

	// 删除元素, r1指向<nil>, r2: 指向2, r1中<nil>和2之间的元素是0 1, 因此result=[0, 1]
	// r1的值变为<nil> 2 3
	_ = r1.Link(r2)

	r3 := ring.New(2)
	r3.Value = 33
	r3.Next().Value = 37

	// 插入r3到r1后面, 返回插入前r1的下一个元素
	r4 := r1.Link(r3)

	// Unlink删除r4之后的3个元素, 返回被删除元素组成的Ring指针
	result := r4.Unlink(3)
	result.Do(printRing)
}
#+END_SRC

** 约瑟夫环
有N个人玩游戏, 从第一个1开始报数, 当报到3时, 此人退出游戏, 然后接着从1开始报数, 输出退出游戏的
次序.
#+BEGIN_SRC go
func main() {
	const (
		playerCount = 7 // 玩家人数
		startPos    = 1 // 开始报数的位置
		quitLine    = 3 // 数到第几个数出局
	)

	r := ring.New(playerCount)
	for i := 0; i < playerCount; i++ {
		r.Value = &Person{alive: true, position: i + 1}
		r = r.Next()
	}
	if startPos > 1 { // 如果不是从第一个人开始报数, 则需要移动一下循环链表
		r = r.Move(startPos - 1)
	}

	counter := 0
	quitCounter := 0
	for quitCounter < playerCount {
		if r.Value.(*Person).alive {
			counter++
		}

		if counter == quitLine {
			fmt.Print(counter)
			r.Value.(*Person).alive = false
			fmt.Printf(" Player %d is quit\n", r.Value.(*Person).position)
			quitCounter++
			counter = 0
		}
		r = r.Next()
	}
}
#+END_SRC
* strings包
strings.Join(os.Args[1:], " ")
